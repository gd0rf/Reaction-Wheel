/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__H
#define TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>

#include "typesCubeCommonBaseBootloader5.h"
#include "typesCommonFrameworkTypes1.h"
#include "tctlmCommonTransfer1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 1, Reset
 * @details Perform a soft reset
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setReset(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_Reset *setVal);

/**
 * @brief ID 2, Halt Bootloader
 * @details Stay in bootloader. Do NOT jump to app
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setHalt(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 3, Configuration
 * @details Configuration of base bootloader
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setConfig(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_Config *setVal);

/**
 * @brief ID 4, Default application target
 * @details Set/Get the default application the bootloader will jump to if not specifically commanded
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setDefaultAppTarget(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_DefaultAppTarget *setVal);

/**
 * @brief ID 5, Jump To Default Application
 * @details Trigger Bootloader to jump to the default application
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setJumpToDefaultApp(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 6, Jump To Application
 * @details Trigger Bootloader to jump to the specified application
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setJumpToApp(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_JumpToApp *setVal);

/**
 * @brief ID 7, Jump To Address
 * @details Trigger Bootloader to jump to the specified address - DO NOT use under normal circumstances
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setJumpToAddress(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_JumpToAddress *setVal);

/**
 * @brief ID 8, Reset File Info Index
 * @details Reset the file info index to start from the first index in the file list. Then request file info to increment the index automatically until last is detected
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setResetFileInfoIdx(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 9, Write File Setup
 * @details Setup a file write
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setWriteFileSetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_WriteFileSetup *setVal);

/**
 * @brief ID 10, Delete File Entry
 * @details Delete a file entry
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setDeleteFileEntry(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_DeleteFileEntry *setVal);

/**
 * @brief ID 11, Write Memory Setup
 * @details Setup a memory write - not to be used under normal circumstances
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setWriteMemorySetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_WriteMemorySetup *setVal);

/**
 * @brief ID 12, Read Memory Setup
 * @details Setup a memory read - not to be used under normal circumstances
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setReadMemorySetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_ReadMemorySetup *setVal);

/**
 * @brief ID 13, Eraze Memory Setup
 * @details Setup a memory erase - not to be used under normal circumstances
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setEraseMemorySetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_EraseMemorySetup *setVal);

/**
 * @brief ID 14, Option Bytes
 * @details Read/Write - not to be used under normal circumstances. Applicable to all CubePrducts except CubeAuriga
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setOptionBytes(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_OptionBytes *setVal);

/**
 * @brief ID 15, Commit Option Bytes
 * @details Commit option bytes. Will cause reset if successful
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setCommitOptionBytes(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_CommitOptionBytes *setVal);

/**
 * @brief ID 16, Option Bytes F7
 * @details Read/Write - not to be used under normal circumstances. Applicable only to CubeAuriga
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setOptionBytesF7(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_OptionBytesF7 *setVal);

/**
 * @brief ID 78, Data Frame
 * @details A single frame of arbitrary data
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setFrame(TypeDef_TctlmEndpoint *endpoint, TypesCommonTransfer1_Frame *setVal);

/**
 * @brief ID 79, Transfer Frame
 * @details Image frame to or from buffer
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setTransferFrame(TypeDef_TctlmEndpoint *endpoint, TypesCommonTransfer1_TransferFrame *setVal);


 /* GET function prototypes */

/**
 * @brief ID 128, Identification
 * @details Identification information for this node
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getIdentification(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_Identification *returnVal);

/**
 * @brief ID 129, Serial Number
 * @details Unique serial number of the CubeSpace Component
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getSerialNumber(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_SerialNumber *returnVal);

/**
 * @brief ID 130, Configuration
 * @details Configuration of base bootloader
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getConfig(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_Config *returnVal);

/**
 * @brief ID 131, State
 * @details State information of the application
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getState(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_State *returnVal);

/**
 * @brief ID 132, Errors
 * @details Error information of the application
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getErrors(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_Errors *returnVal);

/**
 * @brief ID 133, File Info
 * @details Get information on the current file entry index. The index will automatically increment every time this telemetry is requested, and wrap back to first entry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getFileInfo(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_FileInfo *returnVal);

/**
 * @brief ID 134, Default application target
 * @details Set/Get the default application the bootloader will jump to if not specifically commanded
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getDefaultAppTarget(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_DefaultAppTarget *returnVal);

/**
 * @brief ID 135, Option Bytes
 * @details Read/Write - not to be used under normal circumstances. Applicable to all CubePrducts except CubeAuriga
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getOptionBytes(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_OptionBytes *returnVal);

/**
 * @brief ID 136, Communication Status
 * @details Communication Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getCommsStatus(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_CommsStatus *returnVal);

/**
 * @brief ID 137, Memory Mapping
 * @details Microcontroller memory mapping setting
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getMemMap(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_MemMap *returnVal);

/**
 * @brief ID 138, Telecommand Acknowledge
 * @details Used with the I2C protocol to receive Telecommand Ack/Nack
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getTelecommandAcknowledge(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_TelecommandAcknowledge *returnVal);

/**
 * @brief ID 139, Option Bytes F7
 * @details Read/Write - not to be used under normal circumstances. Applicable only to CubeAuriga
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getOptionBytesF7(TypeDef_TctlmEndpoint *endpoint, TypesCubeCommonBaseBootloader5_OptionBytesF7 *returnVal);

/**
 * @brief ID 219, Data Frame
 * @details A single frame of arbitrary data
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getFrame(TypeDef_TctlmEndpoint *endpoint, TypesCommonTransfer1_Frame *returnVal);

/**
 * @brief ID 220, Image Frame Information
 * @details Information about the current frame in memory
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getFrameInfo(TypeDef_TctlmEndpoint *endpoint, TypesCommonTransfer1_FrameInfo *returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5_H
