/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__H
#define TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>

#include "typesCubeSenseControlProgram5.h"
#include "typesCommonFrameworkTypes1.h"
#include "tctlmCommonFramework1.h"
#include "tctlmCommonTransfer1.h"
#include "tctlmCubeSenseCommon1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 1, Reset
 * @details Perform a soft reset
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setReset(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_Reset *setVal);

/**
 * @brief ID 2, Current Unix time
 * @details Current Unix time
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setUnixTime(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_UnixTime *setVal);

/**
 * @brief ID 3, Error Log Index
 * @details Describes the index of the error log that will be read when calling GetErrorLogEntry
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setErrorLogIndex(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogIndex *setVal);

/**
 * @brief ID 4, Error Log Entry
 * @details Error Log Entry
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setErrorLogEntry(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogEntry *setVal);

/**
 * @brief ID 5, Error Log Clear
 * @details Clear the Error Log
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setErrorLogClear(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 6, Error Log Settings
 * @details Error Log Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setErrorLogSettings(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogSettings *setVal);

/**
 * @brief ID 7, Persist Config
 * @details Writes volatile config items to flash
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setConfigPersist(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 58, Detection Area Row Select
 * @details Detection Area Row Select
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setDetectionAreaRowSelect(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_DetectionAreaRowSelect *setVal);

/**
 * @brief ID 59, Set Cam Detection Threshold
 * @details Set threshold for cam detection
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setCamThreshold(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_CamThreshold *setVal);

/**
 * @brief ID 60, Set Camera boresight
 * @details Set Camera boresight pixel location
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setCamBoresight(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_CamBoresight *setVal);

/**
 * @brief ID 61, Setup Image Transfer
 * @details Setup image transfer details
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setImageTransferSetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_ImageTransferSetup *setVal);

/**
 * @brief ID 62, Clear overcurrent flags
 * @details Clear overcurrent flags
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setClearOvercurrentFlags(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 63, Capture and detect
 * @details Capture image and perform detection
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setCaptureDetect(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 65, CAM Distortion
 * @details Distortion coefficients for CAM
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setCamLensDistortion(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_CamLensDistortion *setVal);

/**
 * @brief ID 66, Detect Only
 * @details Performs sun detection only
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setDetect(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 67, Capture Image
 * @details Capture image to specified location
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setImageCapture(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_ImageCapture *setVal);

/**
 * @brief ID 69, Set Sensor Masking Area
 * @details Specify which areas of sensor to mask
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setCamMask(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_CamMask *setVal);

/**
 * @brief ID 78, Data Frame
 * @details A single frame of arbitrary data
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setFrame(TypeDef_TctlmEndpoint *endpoint, TypesCommonTransfer1_Frame *setVal);

/**
 * @brief ID 79, Transfer Frame
 * @details Image frame to or from buffer
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setTransferFrame(TypeDef_TctlmEndpoint *endpoint, TypesCommonTransfer1_TransferFrame *setVal);

/**
 * @brief ID 126, Set Camera Settings
 * @details Change camera settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setCamSettings(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseCommon1_CamSettings *setVal);

/**
 * @brief ID 127, Set Camera Auto Adjust
 * @details Enable or disable auto-adjust for camera exposure
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setCamAutoAdjust(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseCommon1_CamAutoAdjust *setVal);


 /* GET function prototypes */

/**
 * @brief ID 128, Identification
 * @details Identification information for this node (Legacy definition - use Identification2 instead)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getIdentification(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_Identification *returnVal);

/**
 * @brief ID 129, Serial Number
 * @details Unique serial number of the CubeSpace Component
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getSerialNumber(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_SerialNumber *returnVal);

/**
 * @brief ID 130, Error Log Index
 * @details Describes the index of the error log that will be read when calling GetErrorLogEntry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getErrorLogIndex(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogIndex *returnVal);

/**
 * @brief ID 131, Error Log Entry
 * @details Error Log Entry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getErrorLogEntry(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogEntry *returnVal);

/**
 * @brief ID 132, Error Log Settings
 * @details Error Log Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getErrorLogSettings(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogSettings *returnVal);

/**
 * @brief ID 133, Current Unix time
 * @details Current Unix time
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getUnixTime(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_UnixTime *returnVal);

/**
 * @brief ID 134, Persist Config Diagnostics
 * @details Diagnostics data for config persistence
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getConfigPersistDiagnostics(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ConfigPersistDiagnostics *returnVal);

/**
 * @brief ID 135, Communication Status
 * @details Communication Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getCommsStatus(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_CommsStatus *returnVal);

/**
 * @brief ID 136, Version
 * @details Firmware Version
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getVersion(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_Version *returnVal);

/**
 * @brief ID 137, Boot Status
 * @details State information about the device boot process
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getBootStatus(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_BootStatus *returnVal);

/**
 * @brief ID 138, Telecommand Acknowledge
 * @details Used with the I2C protocol to receive Telecommand Ack/Nack
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getTelecommandAcknowledge(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_TelecommandAcknowledge *returnVal);

/**
 * @brief ID 139, Common Error Codes
 * @details Error codes common to all applications
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getCommonErrorCodes(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_CommonErrorCodes *returnVal);

/**
 * @brief ID 140, Identification2
 * @details Identification information for this node
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getIdentification2(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_Identification2 *returnVal);

/**
 * @brief ID 187, Set Camera boresight
 * @details Set Camera boresight pixel location
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getCamBoresight(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_CamBoresight *returnVal);

/**
 * @brief ID 189, Sensor Results Trigger
 * @details Sensor Results with Auto-trigger
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getSensorResultTrigger(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_SensorResultTrigger *returnVal);

/**
 * @brief ID 191, Request Masking Areas
 * @details 5 masked areas each specified by 4 coordinates
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getCamMasks(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_CamMasks *returnVal);

/**
 * @brief ID 192, Sensor results timestamp
 * @details Timestamp of last results
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getSensorResultsTimestamp(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_SensorResultsTimestamp *returnVal);

/**
 * @brief ID 193, CAM Distortion
 * @details Distortion coefficients for CAM
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getCamLensDistortion(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_CamLensDistortion *returnVal);

/**
 * @brief ID 195, Sensor results
 * @details Sensor results
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getSensorResults(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_SensorResults *returnVal);

/**
 * @brief ID 196, Auto Cam Sensor Raw
 * @details Raw pixel values for calibration perposes
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getAutoCamSensorRaw(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_AutoCamSensorRaw *returnVal);

/**
 * @brief ID 197, Detection Area Row
 * @details Detection Area Row (25 pixels)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getDetectionAreaRow(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseControlProgram5_DetectionAreaRow *returnVal);

/**
 * @brief ID 219, Data Frame
 * @details A single frame of arbitrary data
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getFrame(TypeDef_TctlmEndpoint *endpoint, TypesCommonTransfer1_Frame *returnVal);

/**
 * @brief ID 220, Image Frame Information
 * @details Information about the current frame in memory
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getFrameInfo(TypeDef_TctlmEndpoint *endpoint, TypesCommonTransfer1_FrameInfo *returnVal);

/**
 * @brief ID 253, Health Telemetry
 * @details Health Telemetry for CubeSense
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getHealthTlm(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseCommon1_HealthTlm *returnVal);

/**
 * @brief ID 254, Configuration
 * @details Configuration data for the CubeSense
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getConfig(TypeDef_TctlmEndpoint *endpoint, TypesCubeSenseCommon1_Config *returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5_H
