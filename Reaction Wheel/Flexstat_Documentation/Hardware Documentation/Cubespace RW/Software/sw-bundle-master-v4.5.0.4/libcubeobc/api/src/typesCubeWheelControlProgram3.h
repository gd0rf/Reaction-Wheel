/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__H
#define TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>

#include "typesCommonFramework1.h"
#include "typesCommonFrameworkTypes1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TypesCubeWheelControlProgram3_ReadReference
*/
typedef enum TypesCubeWheelControlProgram3_ReadReferenceEnum {
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__FIRST = 0,    /**< Reference from first entry */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__LAST = 1,     /**< Reference from last entry */
} TypesCubeWheelControlProgram3_ReadReference;

/**
 * @brief Enumeration for TypesCubeWheelControlProgram3_ControlModeVal
*/
typedef enum TypesCubeWheelControlProgram3_ControlModeValEnum {
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__NO_CONTROL = 0,           /**< No control mode */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__DUTY_CYCLE_INPUT = 1,     /**< Duty cycle input mode */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__SPEED_CONTROLLER = 2,     /**< Speed controller mode */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__TORQUE_CONTROLLER = 3,    /**< Torque controller mode */
} TypesCubeWheelControlProgram3_ControlModeVal;

/**
 * @brief Enumeration for TypesCubeWheelControlProgram3_WheelErrorState
*/
typedef enum TypesCubeWheelControlProgram3_WheelErrorStateEnum {
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__DATA_VALID = 0,                      /**< Data is valid */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__ENCODER_NO_RESPONSE = 1,             /**< No response from encoder */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__HALL_SENSOR_ENCODER_MISMATCH = 2,    /**< Mismatch between speed reported from hall sensors vs that of encoder */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__SPEED_NOT_REACHED_TIMEOUT = 3,       /**< Speed setpoint not reached within allocated time period */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__MAX_SPEED_REACHED = 4,               /**< Speed setpoint at or near the software limit */
} TypesCubeWheelControlProgram3_WheelErrorState;

/**
 * @brief Enumeration for TypesCubeWheelControlProgram3_WheelTypeEnum
*/
typedef enum TypesCubeWheelControlProgram3_WheelTypeEnumEnum {
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__CUBE_WHEEL_GENERIC = 0,    /**< Default Generic Wheel */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__CUBE_WHEEL_CW0017 = 1,     /**< Node is a CubeWheel 0017 type */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__CUBE_WHEEL_CW0057 = 2,     /**< Node is a CubeWheel 0057 type */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__CUBE_WHEEL_CW0162 = 3,     /**< Node is a CubeWheel 0162 type */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__CUBE_WHEEL_CW0500 = 4,     /**< Node is a CubeWheel 0500 type */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__CUBE_WHEEL_CW1200 = 5,     /**< Node is a CubeWheel 1200 type */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__CUBE_WHEEL_CW2500 = 6,     /**< Node is a CubeWheel 2500 type */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__CUBE_WHEEL_CW5000 = 7,     /**< Node is a CubeWheel 5000 type */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__CUBE_WHEEL_ROVER_1 = 8,    /**< Node is a CubeWheel Rover 1 type */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__CUBE_WHEEL_CW10K = 9,      /**< Node is a CubeWheel 10k type */
    TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3__CUBE_WHEEL_CW40K = 10,     /**< Node is a CubeWheel 40k type */
} TypesCubeWheelControlProgram3_WheelTypeEnum;

/**
 * @brief Backup Gain message structure
 * @details Backup speed controller gain values
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_BackupGainStruct {
    F32 kp;    /**< Proportional gain  (valid range is between 0  and 2 ) */
    F32 ki;    /**< Integrator gain  (valid range is between 0  and 2 ) */
    F32 kd;    /**< Feedback gain  (valid range is between 0  and 2 ) */
} TypesCubeWheelControlProgram3_BackupGain;

/**
 * @brief Backup Wheel Mode message structure
 * @details Set the back-up wheel mode
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_BackupWheelModeStruct {
    Boolean backupMode;    /**< Enable the back-up mode  */
} TypesCubeWheelControlProgram3_BackupWheelMode;

/**
 * @brief Control Mode message structure
 * @details Get the motor control mode
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_ControlModeStruct {
    TypesCubeWheelControlProgram3_ControlModeVal controlMode;    /**< Control mode of motor  */
} TypesCubeWheelControlProgram3_ControlMode;

/**
 * @brief Stator Data message structure
 * @details Data related to the motor stator windings
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_StatorStruct {
    F32 coilcurrent;    /**< Current applied to motor coils  (measurment unit is [mA]. valid range is between 0 mA and 5000 mA) */
    F32 statortemp;     /**< Temperature of the coil windings  (measurment unit is [C]. valid range is between -100 C and 200 C) */
} TypesCubeWheelControlProgram3_Stator;

/**
 * @brief Main Gain message structure
 * @details Main speed controller gain values
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_MainGainStruct {
    F32 kp;    /**< Proportional gain  (valid range is between 0  and 2 ) */
    F32 ki;    /**< Integrator gain  (valid range is between 0  and 2 ) */
    F32 kd;    /**< Feedback gain  (valid range is between 0  and 2 ) */
} TypesCubeWheelControlProgram3_MainGain;

/**
 * @brief PWM Gain message structure
 * @details General PWM gain
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_PWMGainStruct {
    F32 k;    /**< Main gain  (valid range is between 0  and 2 ) */
} TypesCubeWheelControlProgram3_PWMGain;

/**
 * @brief Status and Error Flags message structure
 * @details Processor status and error flags
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_StatusErrorFlagsStruct {
    Boolean invalidTelemetry;      /**< An invalid telemetry request was received  */
    Boolean invalidTelecommand;    /**< An invalid telecommand was received  */
    Boolean encoderError;          /**< Encoder indicates an error  */
    Boolean uARTError;             /**< Error in UART protocol  */
    Boolean i2CError;              /**< Error in I2C protocol  */
    Boolean cANError;              /**< Error in CAN protocol  */
    Boolean configError;           /**< Configuration load error  */
    Boolean speedError;            /**< Speed measurements indicates an error  */
} TypesCubeWheelControlProgram3_StatusErrorFlags;

/**
 * @brief Health Telemetry message structure
 * @details Health telemetry for CubeWheel
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_HealthTlmStruct {
    U16 batteryCurrent;     /**< Battery current measurement  (measurment unit is [mA]. valid range is between 0 mA and 500 mA) */
    U16 batteryVoltage;     /**< Battery voltage measurement at input  (measurment unit is [mV]. valid range is between 0 mV and 36000 mV) */
    U16 driverVoltage;      /**< Battery voltage measurement at driver  (measurment unit is [mV]. valid range is between 0 mV and 25000 mV) */
    U16 digitalCurrent;     /**< Total 3.3V Current  (measurment unit is [mA]. valid range is between 0 mA and 100 mA) */
    F32 mcuTemperature;     /**< MCU temperature measurement  (measurment unit is [C]. valid range is between -50 C and 120 C) */
    U8 watchdogCount[5];    /**< Bitmask representing virtual watchdog region warning counters.  */
} TypesCubeWheelControlProgram3_HealthTlm;

/**
 * @brief Wheel Data message structure
 * @details Complete wheel data
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_WheelDataStruct {
    F32 wheelSpeed;                                                   /**< Wheel speed measurement in rpm  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 wheelSpeedBackup;                                             /**< Wheel backup speed measurement in rpm  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 wheelReference;                                               /**< Wheel reference speed in rpm  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    U16 batteryCurrent;                                               /**< Battery current measurement  (measurment unit is [mA]) */
    TypesCubeWheelControlProgram3_WheelErrorState wheelErrorState;    /**< Wheel data status  */
} TypesCubeWheelControlProgram3_WheelData;

/**
 * @brief Wheel Position Data message structure
 * @details Complete wheel data
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_WheelPosDataStruct {
    F32 wheelPosition;                                                /**< Wheel positiion  (measurment unit is [Rotations]. valid range is between -200000000 Rotations and 2000000000 Rotations) */
    F32 wheelSpeed;                                                   /**< Wheel speed measurement in rpm  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 wheelReference;                                               /**< Wheel reference speed in rpm  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    U16 batteryCurrent;                                               /**< Battery current measurement  (measurment unit is [mA]) */
    TypesCubeWheelControlProgram3_WheelErrorState wheelErrorState;    /**< Wheel data status  */
} TypesCubeWheelControlProgram3_WheelPosData;

/**
 * @brief Wheel Speed message structure
 * @details Wheel speed measurement
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_WheelSpeedStruct {
    F32 wheelSpeed;                                                   /**< Wheel speed measurement in rpm  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    TypesCubeWheelControlProgram3_WheelErrorState wheelErrorState;    /**< Wheel error state  */
} TypesCubeWheelControlProgram3_WheelSpeed;

/**
 * @brief Wheel Reference Speed message structure
 * @details Set momentum wheel reference speed
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_WheelSpeedRefStruct {
    F32 speedRef;    /**< Wheel reference speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
} TypesCubeWheelControlProgram3_WheelSpeedRef;

/**
 * @brief Wheel Torque message structure
 * @details Wheel Torque measurement
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_WheelTorqueStruct {
    F32 wheelTorque;                                                  /**< Wheel Torque measurement in mNm  (measurment unit is [mNm]. valid range is between -50 mNm and 50 mNm) */
    TypesCubeWheelControlProgram3_WheelErrorState wheelErrorState;    /**< Wheel error state  */
} TypesCubeWheelControlProgram3_WheelTorque;

/**
 * @brief Wheel Reference Torque message structure
 * @details Set torque reference for wheel
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_WheelTorqueRefStruct {
    F32 torqueRef;    /**< Wheel reference Torque  (measurment unit is [mNm]. valid range is between -50 mNm and 50 mNm) */
} TypesCubeWheelControlProgram3_WheelTorqueRef;

/**
 * @brief Wheel Reference Distance message structure
 * @details Drive rover for defined distance and max speed.
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_WheelTravelRefStruct {
    F32 speedRef;       /**< Wheel reference speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    S32 distanceRef;    /**< Wheel reference distance  (measurment unit is [Rot]. valid range is between -2000000000 Rot and 2000000000 Rot) */
} TypesCubeWheelControlProgram3_WheelTravelRef;

/**
 * @brief Wheel Reference Speed Ramp Rate Limit message structure
 * @details Set ramp rate limit for wheel speed reference
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_WheelRefRampRateLimitStruct {
    F32 rampRateLimit;    /**< Maximum speed reference increment during 1ms period. This limits the max torque of the motor.  (measurment unit is [RPM/ms]. valid range is between 0 RPM/ms and 10 RPM/ms) */
} TypesCubeWheelControlProgram3_WheelRefRampRateLimit;

/**
 * @brief Wheel Commanded Duty Cycle message structure
 * @details Set motor commanded PWM control signal
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_WheelDutyStruct {
    F32 dutyCycle;    /**< Duty cycle of motor PWM control signal. The torque provided by the motor will be proportional to the PWM signal  (measurment unit is [%]. valid range is between -100 % and 100 %) */
} TypesCubeWheelControlProgram3_WheelDuty;

/**
 * @brief Motor Power message structure
 * @details Switch motor power on/off
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_MotorPowerStruct {
    Boolean motorPowerSwitch;    /**< Switch motor power switch on/off  */
} TypesCubeWheelControlProgram3_MotorPower;

/**
 * @brief Wheel Model message structure
 * @details Get the wheel model
 */
typedef struct TCTLM_PACKED TypesCubeWheelControlProgram3_WheelModelStruct {
    TypesCubeWheelControlProgram3_WheelTypeEnum motorWheelType;    /**< The model type of the motor  */
} TypesCubeWheelControlProgram3_WheelModel;

/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

#ifdef __cplusplus
}
#endif

#endif // TYPES_CUBE_WHEEL_CONTROL_PROGRAM_3_H
