/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_COMPUTER_CONTROL_PROGRAM_8__H
#define TCTLM_CUBE_COMPUTER_CONTROL_PROGRAM_8__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>

#include "typesCubeComputerControlProgram8.h"
#include "typesCommonFrameworkTypes1.h"
#include "tctlmCommonFramework1.h"
#include "tctlmCommonTransfer1.h"
#include "tctlmCubeComputerCommon3.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 1, Reset
 * @details Perform a soft reset
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setReset(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_Reset *setVal);

/**
 * @brief ID 2, Current Unix time
 * @details Current Unix time
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setUnixTime(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_UnixTime *setVal);

/**
 * @brief ID 3, Error Log Index
 * @details Describes the index of the error log that will be read when calling GetErrorLogEntry
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setErrorLogIndex(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogIndex *setVal);

/**
 * @brief ID 4, Error Log Entry
 * @details Error Log Entry
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setErrorLogEntry(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogEntry *setVal);

/**
 * @brief ID 5, Error Log Clear
 * @details Clear the Error Log
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setErrorLogClear(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 6, Error Log Settings
 * @details Error Log Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setErrorLogSettings(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogSettings *setVal);

/**
 * @brief ID 7, Persist Config
 * @details Writes volatile config items to flash
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigPersist(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 46, Reference parameters for FMC scan
 * @details Reference parameters for FMC scan
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setReferenceFmcParam(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ReferenceFmcParam *setVal);

/**
 * @brief ID 47, Reference IRC vector
 * @details Reference IRC vector for inertial target tracking controller
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setReferenceIrcVector(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ReferenceIrcVector *setVal);

/**
 * @brief ID 48, Reference LLH target command
 * @details Reference target location for ground and target tracking controller
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setReferenceTarget(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ReferenceTarget *setVal);

/**
 * @brief ID 49, Commanded GNSS measurements
 * @details GNSS sensor measurements as command to the ADCS
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setGnssSensorCmd(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_GnssSensorCmd *setVal);

/**
 * @brief ID 50, Augmented SGP4 configuration
 * @details Augmented SGP4 configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigAsgp4(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigAsgp4 *setVal);

/**
 * @brief ID 51, Orbit mode
 * @details Orbit mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setOrbMode(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_OrbMode *setVal);

/**
 * @brief ID 52, Mag Deploy Command
 * @details Deploy Magnetometer
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setDeployCommandMag(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_DeployCommandMag *setVal);

/**
 * @brief ID 54, Reference RPY values
 * @details Reference roll, pitch and yaw values for 3-axis wheel control
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setReferenceRpy(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ReferenceRpy *setVal);

/**
 * @brief ID 55, OpenLoopCommandMtq
 * @details OpenLoopCommandMtq
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setOpenLoopCommandMtq(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_OpenLoopCommandMtq *setVal);

/**
 * @brief ID 56, Power state
 * @details Power state
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setPowerState(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_PowerState *setVal);

/**
 * @brief ID 57, ADCS run mode
 * @details ADCS run mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setAdcsRunMode(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_AdcsRunMode *setVal);

/**
 * @brief ID 58, Control mode
 * @details Control mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConMode(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConMode *setVal);

/**
 * @brief ID 59, Wheel configuration
 * @details Wheel configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigActuatorRwl(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigActuatorRwl *setVal);

/**
 * @brief ID 60, Target satellite orbit parameter configuration
 * @details Satellite orbit parameter configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigOrbitTargetParams(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigOrbitTargetParams *setVal);

/**
 * @brief ID 61, ADCS satellite configuration
 * @details ADCS satellite configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigAdcsSatellite(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigAdcsSatellite *setVal);

/**
 * @brief ID 62, ADCS controller configuration
 * @details ADCS controller configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigAdcsController(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigAdcsController *setVal);

/**
 * @brief ID 63, Mag0 magnetometer in-orbit calibration configuration
 * @details Mag0 magnetometer in-orbit calibration configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigMag0OrbitCal(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigMag0OrbitCal *setVal);

/**
 * @brief ID 64, Default mode configuration
 * @details Default mode configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigDefaultModes(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigDefaultModes *setVal);

/**
 * @brief ID 65, Mounting configuration
 * @details Mounting configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigMount(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigMount *setVal);

/**
 * @brief ID 66, Mag1 magnetometer in-orbit calibration configuration
 * @details Mag1 magnetometer in-orbit calibration configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigMag1OrbitCal(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigMag1OrbitCal *setVal);

/**
 * @brief ID 67, ADCS estimator configuration
 * @details ADCS estimator configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigAdcsEstimator(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigAdcsEstimator *setVal);

/**
 * @brief ID 68, Satellite orbit parameter configuration
 * @details Satellite orbit parameter configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigOrbitSatParams(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigOrbitSatParams *setVal);

/**
 * @brief ID 69, Node selection configuration
 * @details Node selection configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigNodeSelection(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigNodeSelection *setVal);

/**
 * @brief ID 70, Magnetorquer configuration
 * @details Magnetorquer configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigActuatorMtq(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigActuatorMtq *setVal);

/**
 * @brief ID 71, Estimation mode
 * @details Estimation mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setEstMode(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_EstMode *setVal);

/**
 * @brief ID 72, ADCS operational state
 * @details ADCS operational state
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setAdcsOpState(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_AdcsOpState *setVal);

/**
 * @brief ID 73, Simulation raw sensor telemetry
 * @details Simulation raw sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setSimSensorRaw(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_SimSensorRaw *setVal);

/**
 * @brief ID 74, OpenLoopCommandRwl
 * @details OpenLoopCommandRwl
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setOpenLoopCommandRwl(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_OpenLoopCommandRwl *setVal);

/**
 * @brief ID 76, OpenLoopCommandHxyzRW
 * @details OpenLoopCommandHxyzRW
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setOpenLoopCommandHxyzRW(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_OpenLoopCommandHxyzRW *setVal);

/**
 * @brief ID 77, Mag sensing element configuration
 * @details Mag sensing element (primary/redundant) configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setConfigMagSensingElement(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigMagSensingElement *setVal);

/**
 * @brief ID 78, Data Frame
 * @details A single frame of arbitrary data
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setFrame(TypeDef_TctlmEndpoint *endpoint, TypesCommonTransfer1_Frame *setVal);

/**
 * @brief ID 79, Transfer Frame
 * @details Image frame to or from buffer
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setTransferFrame(TypeDef_TctlmEndpoint *endpoint, TypesCommonTransfer1_TransferFrame *setVal);

/**
 * @brief ID 80, File Transfer Setup
 * @details Setup a file transfer
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setFileTransferSetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_FileTransferSetup *setVal);

/**
 * @brief ID 99, Pass Through 
 * @details TCTLM Passthrough settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setPassThrough(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_PassThrough *setVal);

/**
 * @brief ID 111, Port Map
 * @details This telemetry describes the nodes that have been discovered i.e. connected to CubeConnect
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setPortMap(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_PortMap *setVal);

/**
 * @brief ID 112, Unsolicited Telemetry Message Setup
 * @details Inclusion bitmask for unsolicited telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setUnsolicitedTlmSetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_UnsolicitedTlmSetup *setVal);

/**
 * @brief ID 113, Reset Image File Info Index
 * @details Resets image file info index
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setImageFileInfoReset(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 114, Set request image log transfer setup
 * @details Set request image log transfer setup
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setImageTransferSetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_ImageTransferSetup *setVal);

/**
 * @brief ID 115, Set a dummy event
 * @details Set a dummy event to be stored in the event log
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setDummyEvent(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_DummyEvent *setVal);

/**
 * @brief ID 116, Unsolicited Event Message Setup
 * @details Setup unsolicited event messages
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setUnsolicitedEventSetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_UnsolicitedEventSetup *setVal);

/**
 * @brief ID 117, Set request telemetry log transfer setup
 * @details Set request telemetry log transfer setup
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setTelemetryLogTransferSetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_TelemetryLogTransferSetup *setVal);

/**
 * @brief ID 120, Initiate Filtered Event Log Transfer
 * @details Initiate event log transfer by specifying time range and data filter
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setEventLogFilterTransferSetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_EventLogFilterTransferSetup *setVal);

/**
 * @brief ID 122, Format all logs
 * @details Format all logs
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_setEraseLogData(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_EraseLogData *setVal);


 /* GET function prototypes */

/**
 * @brief ID 128, Identification
 * @details Identification information for this node (Legacy definition - use Identification2 instead)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getIdentification(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_Identification *returnVal);

/**
 * @brief ID 129, Serial Number
 * @details Unique serial number of the CubeSpace Component
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getSerialNumber(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_SerialNumber *returnVal);

/**
 * @brief ID 130, Error Log Index
 * @details Describes the index of the error log that will be read when calling GetErrorLogEntry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getErrorLogIndex(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogIndex *returnVal);

/**
 * @brief ID 131, Error Log Entry
 * @details Error Log Entry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getErrorLogEntry(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogEntry *returnVal);

/**
 * @brief ID 132, Error Log Settings
 * @details Error Log Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getErrorLogSettings(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogSettings *returnVal);

/**
 * @brief ID 133, Current Unix time
 * @details Current Unix time
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getUnixTime(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_UnixTime *returnVal);

/**
 * @brief ID 134, Persist Config Diagnostics
 * @details Diagnostics data for config persistence
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigPersistDiagnostics(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ConfigPersistDiagnostics *returnVal);

/**
 * @brief ID 135, Communication Status
 * @details Communication Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getCommsStatus(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_CommsStatus *returnVal);

/**
 * @brief ID 136, Version
 * @details Firmware Version
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getVersion(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_Version *returnVal);

/**
 * @brief ID 137, Boot Status
 * @details State information about the device boot process
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getBootStatus(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_BootStatus *returnVal);

/**
 * @brief ID 138, Telecommand Acknowledge
 * @details Used with the I2C protocol to receive Telecommand Ack/Nack
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTelecommandAcknowledge(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_TelecommandAcknowledge *returnVal);

/**
 * @brief ID 139, Common Error Codes
 * @details Error codes common to all applications
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getCommonErrorCodes(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_CommonErrorCodes *returnVal);

/**
 * @brief ID 140, Identification2
 * @details Identification information for this node
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getIdentification2(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_Identification2 *returnVal);

/**
 * @brief ID 153, Health telemetry for CubeAuriga
 * @details Health telemetry for CubeAuriga star camera
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmStrAurigaHealth(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmStrAurigaHealth *returnVal);

/**
 * @brief ID 154, Raw CubeAuriga telemetry
 * @details Raw CubeStar telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmStrCubeAurigaRaw(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmStrCubeAurigaRaw *returnVal);

/**
 * @brief ID 155, Reference parameters for FMC scan
 * @details Reference parameters for FMC scan
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getReferenceFmcParam(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ReferenceFmcParam *returnVal);

/**
 * @brief ID 156, Reference IRC vector
 * @details Reference IRC vector for inertial target tracking controller
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getReferenceIrcVector(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ReferenceIrcVector *returnVal);

/**
 * @brief ID 157, Reference LLH target command
 * @details Reference target location for ground and target tracking controller
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getReferenceTarget(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ReferenceTarget *returnVal);

/**
 * @brief ID 158, GNSS UART Status
 * @details Status telemetry for GNSS UART
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmGnssUartStatus(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmGnssUartStatus *returnVal);

/**
 * @brief ID 159, CubeNode-Quad PortMap
 * @details The configured port map of all CubeNode-Quads
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getCubeNodePortMap(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_CubeNodePortMap *returnVal);

/**
 * @brief ID 160, Raw CubeStar telemetry
 * @details Raw CubeStar telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmStrCubeStarRaw(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmStrCubeStarRaw *returnVal);

/**
 * @brief ID 161, File Transfer Status
 * @details File Transfer Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getFileTransferStatus(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_FileTransferStatus *returnVal);

/**
 * @brief ID 162, Orbit mode
 * @details Orbit mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getOrbMode(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_OrbMode *returnVal);

/**
 * @brief ID 163, Current execution point
 * @details Current execution point
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmExecutionPoint(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmExecutionPoint *returnVal);

/**
 * @brief ID 164, HIL telemetry
 * @details HIL telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmHil(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmHil *returnVal);

/**
 * @brief ID 165, Health telemetry for CubeStar
 * @details Health telemetry for CubeStar star camera
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmStrHealth(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmStrHealth *returnVal);

/**
 * @brief ID 166, Health telemetry for CubeNode PST3S
 * @details Health telemetry for CubeNode PST3S
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmStrPst3sHealth(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmStrPst3sHealth *returnVal);

/**
 * @brief ID 167, Health telemetry for CubeMag magnetometer
 * @details Health telemetry for CubeMag magnetometer
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmCubeMagHealth(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmCubeMagHealth *returnVal);

/**
 * @brief ID 168, Health telemetry for CubeSense Sun
 * @details Health telemetry for CubeSense Sun
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmFssCubeSenseSunHealth(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmFssCubeSenseSunHealth *returnVal);

/**
 * @brief ID 169, Torquer Current measurements
 * @details Current measurements
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmTorquerCurrents(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmTorquerCurrents *returnVal);

/**
 * @brief ID 170, Raw CubeSense Sun telemetry
 * @details Raw CubeSense Sun telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmFssCubeSenseSunRaw(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmFssCubeSenseSunRaw *returnVal);

/**
 * @brief ID 171, Raw external sensor telemetry
 * @details Raw external sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmExtSensorRaw(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmExtSensorRaw *returnVal);

/**
 * @brief ID 172, Controller telemetry
 * @details Controller telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmController(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmController *returnVal);

/**
 * @brief ID 173, Backup estimator telemetry
 * @details Backup estimator telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmEstimatorBackup(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmEstimatorBackup *returnVal);

/**
 * @brief ID 174, Models telemetry
 * @details Models telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmModels(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmModels *returnVal);

/**
 * @brief ID 175, Calibrated GNSS sensor telemetry
 * @details Calibrated GNSS sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmSensorCalGnss(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmSensorCalGnss *returnVal);

/**
 * @brief ID 176, Calibrated HSS sensor telemetry
 * @details Calibrated HSS sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmSensorCalHss(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmSensorCalHss *returnVal);

/**
 * @brief ID 177, Calibrated MAG sensor telemetry
 * @details Calibrated MAG sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmSensorCalMag(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmSensorCalMag *returnVal);

/**
 * @brief ID 178, Calibrated FSS sensor telemetry
 * @details Calibrated FSS sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmSensorCalFss(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmSensorCalFss *returnVal);

/**
 * @brief ID 179, Raw CubeSense Earth telemetry
 * @details Raw CubeSense Earth telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmHssCubeSenseEarthRaw(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmHssCubeSenseEarthRaw *returnVal);

/**
 * @brief ID 180, Raw MAG sensor telemetry
 * @details Raw MAG sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmSensorRawMag(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmSensorRawMag *returnVal);

/**
 * @brief ID 181, Reference RPY values
 * @details Reference roll, pitch and yaw values for 3-axis wheel control
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getReferenceRpy(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ReferenceRpy *returnVal);

/**
 * @brief ID 182, OpenLoopCommandMtq
 * @details OpenLoopCommandMtq
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getOpenLoopCommandMtq(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_OpenLoopCommandMtq *returnVal);

/**
 * @brief ID 183, Power state
 * @details Power state
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getPowerState(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_PowerState *returnVal);

/**
 * @brief ID 184, ADCS run mode
 * @details ADCS run mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getAdcsRunMode(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_AdcsRunMode *returnVal);

/**
 * @brief ID 185, Control mode
 * @details Control mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConMode(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConMode *returnVal);

/**
 * @brief ID 186, Wheel configuration
 * @details Wheel configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigActuatorRwl(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigActuatorRwl *returnVal);

/**
 * @brief ID 187, Target satellite orbit parameter configuration
 * @details Satellite orbit parameter configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigOrbitTargetParams(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigOrbitTargetParams *returnVal);

/**
 * @brief ID 188, Augmented SGP4 configuration
 * @details Augmented SGP4 configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigAsgp4(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigAsgp4 *returnVal);

/**
 * @brief ID 189, ADCS satellite configuration
 * @details ADCS satellite configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigAdcsSatellite(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigAdcsSatellite *returnVal);

/**
 * @brief ID 190, ADCS controller configuration
 * @details ADCS controller configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigAdcsController(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigAdcsController *returnVal);

/**
 * @brief ID 191, Mag0 magnetometer in-orbit calibration configuration
 * @details Mag0 magnetometer in-orbit calibration configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigMag0OrbitCal(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigMag0OrbitCal *returnVal);

/**
 * @brief ID 192, Default mode configuration
 * @details Default mode configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigDefaultModes(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigDefaultModes *returnVal);

/**
 * @brief ID 193, Mounting configuration
 * @details Mounting configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigMount(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigMount *returnVal);

/**
 * @brief ID 194, Mag1 magnetometer in-orbit calibration configuration
 * @details Mag1 magnetometer in-orbit calibration configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigMag1OrbitCal(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigMag1OrbitCal *returnVal);

/**
 * @brief ID 195, ADCS estimator configuration
 * @details ADCS estimator configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigAdcsEstimator(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigAdcsEstimator *returnVal);

/**
 * @brief ID 196, Satellite orbit parameter configuration
 * @details Satellite orbit parameter configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigOrbitSatParams(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigOrbitSatParams *returnVal);

/**
 * @brief ID 197, Node selection configuration
 * @details Node selection configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigNodeSelection(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigNodeSelection *returnVal);

/**
 * @brief ID 198, Magnetorquer configuration
 * @details Magnetorquer configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigActuatorMtq(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigActuatorMtq *returnVal);

/**
 * @brief ID 199, Estimation mode
 * @details Estimation mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getEstMode(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_EstMode *returnVal);

/**
 * @brief ID 200, ADCS operational state
 * @details ADCS operational state
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getAdcsOpState(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_AdcsOpState *returnVal);

/**
 * @brief ID 201, Simulation raw sensor telemetry
 * @details Simulation raw sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getSimSensorRaw(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_SimSensorRaw *returnVal);

/**
 * @brief ID 202, OpenLoopCommandRwl
 * @details OpenLoopCommandRwl
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getOpenLoopCommandRwl(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_OpenLoopCommandRwl *returnVal);

/**
 * @brief ID 203, Raw CSS sensor telemetry
 * @details Raw CSS sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmSensorRawCss(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmSensorRawCss *returnVal);

/**
 * @brief ID 204, Raw GYR sensor telemetry
 * @details Raw GYRO sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmSensorRawGyro(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmSensorRawGyro *returnVal);

/**
 * @brief ID 205, Raw RWL sensor telemetry
 * @details Raw RWL sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmSensorRawRwl(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmSensorRawRwl *returnVal);

/**
 * @brief ID 206, Calibrated CSS sensor telemetry
 * @details Calibrated CSS sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmSensorCalCss(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmSensorCalCss *returnVal);

/**
 * @brief ID 207, Calibrated GYR sensor telemetry
 * @details Calibrated GYRO sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmSensorCalGyro(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmSensorCalGyro *returnVal);

/**
 * @brief ID 208, Calibrated STR sensor telemetry
 * @details Calibrated STR sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmSensorCalStr(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmSensorCalStr *returnVal);

/**
 * @brief ID 209, Calibrated RWL sensor telemetry
 * @details Calibrated RWL sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmSensorCalRwl(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmSensorCalRwl *returnVal);

/**
 * @brief ID 210, Main estimator telemetry
 * @details Main estimator telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmEstimatorMain(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmEstimatorMain *returnVal);

/**
 * @brief ID 211, Main estimator high-resolution telemetry
 * @details Main estimator high-resolution telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmEstimatorMainHighRes(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmEstimatorMainHighRes *returnVal);

/**
 * @brief ID 212, Raw GNSS sensor telemetry
 * @details Raw GNSS sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmGnssRaw(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmGnssRaw *returnVal);

/**
 * @brief ID 213, Raw PST3S star tracker telemetry
 * @details Raw PST3S star tracker telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmStrPst3sRaw(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmStrPst3sRaw *returnVal);

/**
 * @brief ID 214, ACP execution telemetry
 * @details ACP execution telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmAcpExecution(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmAcpExecution *returnVal);

/**
 * @brief ID 215, OpenLoopCommandHxyzRW
 * @details OpenLoopCommandHxyzRW
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getOpenLoopCommandHxyzRW(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_OpenLoopCommandHxyzRW *returnVal);

/**
 * @brief ID 216, CubeComputer Health
 * @details Health telemetry for ADCS CubeComputer
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmCubeComputerHealth(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmCubeComputerHealth *returnVal);

/**
 * @brief ID 217, Health telemetry for CubeSense Earth
 * @details Health telemetry for CubeSense Earth
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmHssCubeSenseEarthHealth(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmHssCubeSenseEarthHealth *returnVal);

/**
 * @brief ID 218, Health telemetry for Reaction Wheels
 * @details Health telemetry for reaction wheels
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmRwlHealth(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmRwlHealth *returnVal);

/**
 * @brief ID 219, Data Frame
 * @details A single frame of arbitrary data
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getFrame(TypeDef_TctlmEndpoint *endpoint, TypesCommonTransfer1_Frame *returnVal);

/**
 * @brief ID 220, Image Frame Information
 * @details Information about the current frame in memory
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getFrameInfo(TypeDef_TctlmEndpoint *endpoint, TypesCommonTransfer1_FrameInfo *returnVal);

/**
 * @brief ID 221, Mag sensing element configuration
 * @details Mag sensing element (primary/redundant) configuration
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getConfigMagSensingElement(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_ConfigMagSensingElement *returnVal);

/**
 * @brief ID 225, Health telemetry for CubeNode NSSRWL
 * @details Health telemetry for CubeNode NSSRWL
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmNssRwlHealth(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmNssRwlHealth *returnVal);

/**
 * @brief ID 226, Raw NSSRWL sensor telemetry
 * @details Raw NSSRWL sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmRwlNssRwlRaw(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmRwlNssRwlRaw *returnVal);

/**
 * @brief ID 227, Telemtry log inclusion masks
 * @details Get the Telemtry log inclusion masks
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTelemtryLogInclusionMasks(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_TelemtryLogInclusionMasks *returnVal);

/**
 * @brief ID 228, Unsolicited Telemetry Message Setup
 * @details Inclusion bitmask for unsolicited telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getUnsolicitedTlmSetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_UnsolicitedTlmSetup *returnVal);

/**
 * @brief ID 229, Pass Through 
 * @details TCTLM Passthrough settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getPassThrough(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_PassThrough *returnVal);

/**
 * @brief ID 230, Component Error Codes
 * @details Error codes common to CubeComputer bootloader and control-program
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getComponentErrorCodes(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_ComponentErrorCodes *returnVal);

/**
 * @brief ID 231, Image File Info
 * @details Stored image file information
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getImageFileInfo(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_ImageFileInfo *returnVal);

/**
 * @brief ID 232, Image Transfer Status
 * @details Image Transfer Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getImageTransferStatus(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_ImageTransferStatus *returnVal);

/**
 * @brief ID 233, Unsolicited Event Message Setup
 * @details Setup unsolicited event messages
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getUnsolicitedEventSetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_UnsolicitedEventSetup *returnVal);

/**
 * @brief ID 234, Get the Telemtry log status response
 * @details Get the Telemtry log status response
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTelemtryLogStatus(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_TelemtryLogStatus *returnVal);

/**
 * @brief ID 235, Get the Event log status response
 * @details Get the Event log status response
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getEventLogStatus(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_EventLogStatus *returnVal);

/**
 * @brief ID 236, RAW LITEF uFORS sensor telemetry
 * @details Raw LITEF uFORS sensor telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmGyrLitefuforsRaw(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmGyrLitefuforsRaw *returnVal);

/**
 * @brief ID 237, Node Initialization States
 * @details Current initialization state of each node
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmNodeInitState(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmNodeInitState *returnVal);

/**
 * @brief ID 238, Expected Nodes
 * @details Lists the expected nodes config item
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getExpectedNodes(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_ExpectedNodes *returnVal);

/**
 * @brief ID 239, Port Map
 * @details This telemetry describes the nodes that have been discovered i.e. connected to CubeConnect
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getPortMap(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_PortMap *returnVal);

/**
 * @brief ID 240, Port Diagnostics
 * @details Diagnostics relating to the inernal CubeConnect interface port
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getPortDiagnostics(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerCommon3_PortDiagnostics *returnVal);

/**
 * @brief ID 241, File Transfer Setup
 * @details Setup a file transfer
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getFileTransferSetup(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_FileTransferSetup *returnVal);

/**
 * @brief ID 242, File Info
 * @details Cached file information after calling FileTransferSetup
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getFileInfo(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_FileInfo *returnVal);

/**
 * @brief ID 243, Health telemetry for CubeNode LITEFUFORS
 * @details Health telemetry for CubeNode LITEFUFORS
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmLitefuforsHealth(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmLitefuforsHealth *returnVal);

/**
 * @brief ID 244, ASGP4 Orbital Parameters
 * @details Augmented orbital parameters
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerControlProgram8_getTlmAsgp4(TypeDef_TctlmEndpoint *endpoint, TypesCubeComputerControlProgram8_TlmAsgp4 *returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_COMPUTER_CONTROL_PROGRAM_8_H
