/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__H
#define TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>

#include "typesCommonFrameworkTypes1.h"
#include "typesCubeNodeCommonTypes1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TypesCubeNodeControlProgramNssrwlCommon1_NodeState
*/
typedef enum TypesCubeNodeControlProgramNssrwlCommon1_NodeStateEnum {
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NODE_OFF = 0,            /**< Node is Off */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NODE_IDLE = 1,           /**< Node is Idle */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NODE_NSS_RWL_PWR = 2,    /**< Node is powering on or off one or more NSSRWL's */
} TypesCubeNodeControlProgramNssrwlCommon1_NodeState;

/**
 * @brief Enumeration for TypesCubeNodeControlProgramNssrwlCommon1_NssRwlState
*/
typedef enum TypesCubeNodeControlProgramNssrwlCommon1_NssRwlStateEnum {
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NSS_RWL_OFF = 0,      /**< PSST3S is Off */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NSS_RWL_BOOT = 1,     /**< PSST3S is Booting */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NSS_RWL_IDLE = 2,     /**< PSST3S is Idle */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NSS_RWL_AUTO = 3,     /**< NSSRWL is Auto-Sampling */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NSS_RWL_ERROR = 4,    /**< NSSRWL is in an Error State */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlState;

/**
 * @brief Enumeration for TypesCubeNodeControlProgramNssrwlCommon1_NssRwlPowerState
*/
typedef enum TypesCubeNodeControlProgramNssrwlCommon1_NssRwlPowerStateEnum {
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__POWERED_NO_CHANGE = 0,    /**< No change */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__POWERED_OFF = 1,          /**< NSSRWL Power Off */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__POWERED_ON = 2,           /**< NSSRWL Power On */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlPowerState;

/**
 * @brief Enumeration for TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlms
*/
typedef enum TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlmsEnum {
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NONE = 0,                    /**< No TcTlm history */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__SET_MOTOR_CURRENT = 1,       /**< Set Motor Current */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__SET_WHEEL_SPEED = 2,         /**< Set Wheel Speed Reference */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__SET_TORQUE = 3,              /**< Set Torquw */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__GET_TLM_STANDARD = 4,        /**< Get Standard Telemetry */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__GET_TLM_EXTENDED = 5,        /**< Get Extended Telemetry */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__GET_TLM_SYSTEM = 6,          /**< Get System Telemetry */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__SET_SOFTWARE_RESET = 7,      /**< Set Software Reset */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__SET_SOFTWARE_EXECUTE = 8,    /**< Set Software Execute */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlms;

/**
 * @brief Enumeration for TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlmResult
*/
typedef enum TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlmResultEnum {
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__TC_TLM_NONE = 0,          /**< No Transaction Yet */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__ACK = 1,                  /**< Successful Ack on last transaction */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__ERROR_ECHO_MATCH = 2,     /**< Command byte not successfully echo'd */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__ERROR_ECHO_LENGTH = 3,    /**< Echo response length is greater than transmitted data length */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__ERROR_TLM_ACK = 4,        /**< No Ack byte received in tlm data block */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__TIMEOUT = 5,              /**< Timeout */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__TXERROR = 6,              /**< Uart Tx Error */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__RXERROR = 7,              /**< Uart Rx Error */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlmResult;

/**
 * @brief Enumeration for TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSampleSource
*/
typedef enum TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSampleSourceEnum {
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__STANDARD_TLM = 0,    /**< Standard telemetry is auto-sampled */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__EXTENDED_TLM = 1,    /**< Extended telemetry is auto-sampled */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSampleSource;

/**
 * @brief PowerState general structure
 */
typedef struct TypesCubeNodeControlProgramNssrwlCommon1_PowerStateStruct {
    TypesCubeNodeControlProgramNssrwlCommon1_NssRwlPowerState power;    /**< RWL Power State  */
} TypesCubeNodeControlProgramNssrwlCommon1_PowerState;

/**
 * @brief BootError general structure
 */
typedef struct TypesCubeNodeControlProgramNssrwlCommon1_BootErrorStruct {
    U32 errorCode;    /**< Boot Error Code  */
} TypesCubeNodeControlProgramNssrwlCommon1_BootError;

/**
 * @brief RwlStatus general structure
 */
typedef struct TypesCubeNodeControlProgramNssrwlCommon1_RwlStatusStruct {
    TypesCubeNodeControlProgramNssrwlCommon1_NssRwlState state;                  /**< Service State  */
    U32 failCount;                                                               /**< Request Failure Count  */
    U32 failCountLastSuccess;                                                    /**< Request Failure Count at Last Success  */
    TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlms lastReq;               /**< Last Request  */
    TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlmResult lastReqResult;    /**< Last Request Result  */
} TypesCubeNodeControlProgramNssrwlCommon1_RwlStatus;

/**
 * @brief RwlSpeed general structure
 */
typedef struct TypesCubeNodeControlProgramNssrwlCommon1_RwlSpeedStruct {
    F32 speed;    /**< NSSRWL measured speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
} TypesCubeNodeControlProgramNssrwlCommon1_RwlSpeed;

/**
 * @brief TlmStandard general structure
 */
typedef struct TypesCubeNodeControlProgramNssrwlCommon1_TlmStandardStruct {
    U8 serialNumber;               /**< Serial Number  */
    F32 targetValue;               /**< Target Value  (valid range is between -10000  and 10000 ) */
    F32 actualWheelSpeed;          /**< Actual Wheel Speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 actualMotorCurrent;        /**< Actual Motor current  (measurment unit is [mA]. valid range is between 0 mA and 20000 mA) */
    F32 temperature;               /**< Temperature  (measurment unit is [C]. valid range is between -273 C and 273 C) */
    F32 iSignal;                   /**< I-Signal (loop)  (valid range is between -10000  and 10000 ) */
    Boolean reactionWheelMode;     /**< Set if Reaction Wheel mode is On  */
    Boolean currentControlMode;    /**< Set if Current Control mode is Active  */
    Boolean speedControlMode;      /**< Set if Speed Control mode is Active  */
    Boolean torqueMode;            /**< Set if Torque mode is Active  */
    Boolean wheelGyroMode;         /**< Set if Wheel/Gyro mode is On  */
    Boolean omegaPiControlLoop;    /**< Set if Omega-PI Control Loop is Active  */
    Boolean anglePdControlLoop;    /**< Set if Angle-PD Control Loop is Active  */
    Boolean bootControl;           /**< Set if Boot Control is Active  */
    Boolean gyroConnected;         /**< Set if Gyro Connected  */
    Boolean gyroTelemetry;         /**< Set if Gyro Telemetry is On  */
    Boolean gyroFlagRegister;      /**< Set if Gyro Flag Register is not zero  */
    Boolean crcError;              /**< Set if CRC Error Protected Area  */
    Boolean wrongLlCommand;        /**< Set if Wrong Low-Level Command  */
    Boolean wrongHlCommand;        /**< Set if Wrong High-Level Command  */
    Boolean toutSci1Main;          /**< Set if Timeout on SCI1 Main Interface  */
    Boolean toutSci2Gyro;          /**< Set if Timeout on SCI2 Gyro Interface  */
} TypesCubeNodeControlProgramNssrwlCommon1_TlmStandard;

/**
 * @brief TlmExtended general structure
 */
typedef struct TypesCubeNodeControlProgramNssrwlCommon1_TlmExtendedStruct {
    U8 serialNumber;         /**< Serial Number  */
    F32 actualWheelSpeed;    /**< Actual Wheel Speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
} TypesCubeNodeControlProgramNssrwlCommon1_TlmExtended;

/**
 * @brief TlmSystem general structure
 */
typedef struct TypesCubeNodeControlProgramNssrwlCommon1_TlmSystemStruct {
    U8 serialNumber;          /**< Serial Number  */
    U8 deviceType;            /**< Device Type  */
    U8 deviceId;              /**< Device ID  */
    U8 month;                 /**< Month  */
    U8 year;                  /**< Year  */
    U16 statusRegister;       /**< Status Register  */
    U16 acsRegister;          /**< ACS Flag Register  */
    U16 systemRegister;       /**< System Flag Register  */
    U16 rwaRegister;          /**< RWA Flag Register  */
    U8 gyroRegister;          /**< Gyro Flag Register  */
    U16 bootFlag;             /**< Boot Flag  */
    U16 bootVector;           /**< Boot Vector  */
    U8 acsControlInterval;    /**< ACS Control Interval  (measurment unit is [10.24ms]) */
    U16 acsStartAddr;         /**< Actual start address ACS boot control  */
    U16 tachoStartAddr;       /**< Actual start address Tacho control  */
} TypesCubeNodeControlProgramNssrwlCommon1_TlmSystem;

/**
 * @brief NSSRWL Power State message structure
 * @details Set the NSSRWL Power State
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NssRwlPowerStruct {
    TypesCubeNodeControlProgramNssrwlCommon1_PowerState powerRwl[TYPES_CUBE_NODE_COMMON_TYPES_1__PORT_MAX];    /**< NSSRWL Power State  */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlPower;

/**
 * @brief Node Service Settings message structure
 * @details Set/Get the Node Service Settings
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NodeSvcSettingsStruct {
    Boolean nssRwlAutoBoot;    /**< NSSRWL Auto-Boot on Startup Enable/Disable  */
} TypesCubeNodeControlProgramNssrwlCommon1_NodeSvcSettings;

/**
 * @brief NSSRWL Service Settings message structure
 * @details Set/Get the NSSRWL Service Settings
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSvcSettingsStruct {
    U32 maxTcTlmErrors;                                                          /**< NSSRWL Maximum Number of TcTlm Errors Before Entering Error State  */
    U8 sampleFrequency;                                                          /**< NSSRWL Sample Frequency  (measurment unit is [Hz]. valid range is between 1 Hz and 50 Hz) */
    Boolean autoSample;                                                          /**< NSSRWL Auto-Sample Enable/Disable  */
    TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSampleSource sampleSource;    /**< Selects which telemetry is sampled for wheel speed  */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSvcSettings;

/**
 * @brief Node Service Status message structure
 * @details Node Service Status
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NodeSvcStatusStruct {
    TypesCubeNodeControlProgramNssrwlCommon1_NodeState nodeState;                                              /**< CubeNode Node Service State  */
    TypesCubeNodeControlProgramNssrwlCommon1_BootError bootError[TYPES_CUBE_NODE_COMMON_TYPES_1__PORT_MAX];    /**< NSSRWL Boot errors  */
} TypesCubeNodeControlProgramNssrwlCommon1_NodeSvcStatus;

/**
 * @brief NSSRWL Service Status message structure
 * @details NSSRWL Service Status
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSvcStatusStruct {
    TypesCubeNodeControlProgramNssrwlCommon1_RwlStatus status[TYPES_CUBE_NODE_COMMON_TYPES_1__PORT_MAX];    /**< NSSRWL Status  */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSvcStatus;

/**
 * @brief Wheel Reference Speed message structure
 * @details Set momentum wheel reference speed
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeedRefStruct {
    TypesCubeNodeCommonTypes1_Ports port;    /**< Target port for reference speed  */
    F32 speedRef;                            /**< Wheel reference speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeedRef;

/**
 * @brief Torque message structure
 * @details Set torque
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTorqueStruct {
    TypesCubeNodeCommonTypes1_Ports port;    /**< Target port for torque  */
    F32 torque;                              /**< Torque  (measurment unit is [mNm]. valid range is between -25 mNm and 25 mNm) */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTorque;

/**
 * @brief Motor Current message structure
 * @details Set motor current
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NssRwlMotorCurrentStruct {
    TypesCubeNodeCommonTypes1_Ports port;    /**< Target port for motor current  */
    F32 current;                             /**< Current  (measurment unit is [mA]. valid range is between -3000 mA and 3000 mA) */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlMotorCurrent;

/**
 * @brief NSSRWL Software Reset message structure
 * @details Set the NSSRWL Software Reset
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSoftwareResetStruct {
    TypesCubeNodeCommonTypes1_Ports port;    /**< Target port for software reset  */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSoftwareReset;

/**
 * @brief Wheel Speed All message structure
 * @details Wheel speed measurement for all wheels (does not depend on port selection)
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeedAllStruct {
    TypesCubeNodeControlProgramNssrwlCommon1_RwlSpeed speed[TYPES_CUBE_NODE_COMMON_TYPES_1__PORT_MAX];    /**< NSSRWL measured wheel speeds  */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeedAll;

/**
 * @brief Wheel Speed Port 1 message structure
 * @details Wheel speed measurement from port 1
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeed1Struct {
    TypesCubeNodeControlProgramNssrwlCommon1_RwlSpeed speed;    /**< NSSRWL measured wheel speed  */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeed1;

/**
 * @brief Raw NSSRWL Standard TLM Port 1 message structure
 * @details Get NSSRWL Standard TLM Packet from port 1
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTlmStandard1Struct {
    TypesCubeNodeControlProgramNssrwlCommon1_TlmStandard tlm;    /**< NSSRWL standard tlm  */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTlmStandard1;

/**
 * @brief Raw NSSRWL Extended TLM Port 1 message structure
 * @details Get NSSRWL Extended TLM Packet from port 1
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTlmExtended1Struct {
    TypesCubeNodeControlProgramNssrwlCommon1_TlmExtended tlm;    /**< NSSRWL extended tlm  */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTlmExtended1;

/**
 * @brief Raw NSSRWL System TLM Port 1 message structure
 * @details Get NSSRWL System TLM Packet from port 1
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTlmSystem1Struct {
    TypesCubeNodeControlProgramNssrwlCommon1_TlmSystem tlm;    /**< NSSRWL system tlm  */
} TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTlmSystem1;

/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

#ifdef __cplusplus
}
#endif

#endif // TYPES_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1_H
