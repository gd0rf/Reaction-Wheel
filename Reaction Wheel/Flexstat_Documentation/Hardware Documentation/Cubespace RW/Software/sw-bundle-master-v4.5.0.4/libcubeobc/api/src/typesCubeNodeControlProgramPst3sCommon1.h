/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__H
#define TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>

#include "typesCommonFrameworkTypes1.h"
#include "typesCubeNodeControlProgramPst3sCommonTypes1.h"
#include "typesCubeNodeCommonTypes1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TypesCubeNodeControlProgramPst3sCommon1_NodeState
*/
typedef enum TypesCubeNodeControlProgramPst3sCommon1_NodeStateEnum {
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__NODE_OFF = 0,          /**< Node is Off */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__NODE_IDLE = 1,         /**< Node is Idle */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__NODE_PST3S_PWR = 2,    /**< Node is powering on or off one or more PST3S's */
} TypesCubeNodeControlProgramPst3sCommon1_NodeState;

/**
 * @brief Enumeration for TypesCubeNodeControlProgramPst3sCommon1_Pst3sState
*/
typedef enum TypesCubeNodeControlProgramPst3sCommon1_Pst3sStateEnum {
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__PST3S_OFF = 0,      /**< PSST3S is Off */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__PST3S_BOOT = 1,     /**< PSST3S is Booting */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__PST3S_IDLE = 2,     /**< PSST3S is Idle */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__PST3S_AUTO = 3,     /**< PST3S is Auto-Sampling */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__PST3S_ERROR = 4,    /**< PST3S is in an Error State */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sState;

/**
 * @brief Enumeration for TypesCubeNodeControlProgramPst3sCommon1_Pst3sPowerState
*/
typedef enum TypesCubeNodeControlProgramPst3sCommon1_Pst3sPowerStateEnum {
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__POWERED_NO_CHANGE = 0,    /**< No change */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__POWERED_OFF = 1,          /**< PST3S Power Off */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__POWERED_ON = 2,           /**< PST3S Power On */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sPowerState;

/**
 * @brief Enumeration for TypesCubeNodeControlProgramPst3sCommon1_Pst3sTcTlms
*/
typedef enum TypesCubeNodeControlProgramPst3sCommon1_Pst3sTcTlmsEnum {
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__NONE = 0,                        /**< No TcTlm history */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_OPERATING_MODE = 1,          /**< Set Operating Mode */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_NUM_NAVIGATION_STARS = 2,    /**< Set Number of Navigation Stars */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_EXPOSURE = 3,                /**< Set Exposure */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_IFT = 4,                     /**< Set Image Fixed Threshold */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_SAAMODE = 5,                 /**< Set SAA Mode */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_SAATHRESHOLD = 6,            /**< Set SAA Threshold */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_EXT_IMG = 7,                 /**< Set Ext Image transfer */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_IMG_GAIN = 8,                /**< Set Imaging Gain */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_FSST = 9,                    /**< Set Four Star Search Threshold */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_SECOND_CALIBRATION = 10,     /**< Set Second Calibration */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_TMT = 11,                    /**< Set Tracking Mode Threshold */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_QUAT_FILTERING = 12,         /**< Set Quaternion Filtering */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_DYN_MODE = 13,               /**< Set Dynamic Mode */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_EDAC_OFF = 14,               /**< Set EDAC off */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_ICT = 15,                    /**< Set Image Capture Transfer */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_SYSTEM_RESET = 16,           /**< Set System Reset */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__GET_TLM = 17,                    /**< Get Tlm */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sTcTlms;

/**
 * @brief Enumeration for TypesCubeNodeControlProgramPst3sCommon1_Pst3sTcTlmResult
*/
typedef enum TypesCubeNodeControlProgramPst3sCommon1_Pst3sTcTlmResultEnum {
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__TC_TLM_NONE = 0,       /**< No Transaction Yet */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__TC_NACK = 1,           /**< TC Nack */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__TC_ACK = 2,            /**< TC Ack */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__TLM = 3,               /**< TLM Response */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SUM_ERROR = 4,         /**< Sum Error */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__CORRUPT_DATA = 5,      /**< Corrupt Data */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__JUNK_DATA = 6,         /**< Junk Data */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__INCOMPLETE_MSG = 7,    /**< Incomplete Message */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__TIMEOUT = 8,           /**< Timeout */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__TXERROR = 9,           /**< Tx Error */
    TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__OVERFLOW = 10,         /**< Overflow */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sTcTlmResult;

/**
 * @brief PowerState general structure
 */
typedef struct TypesCubeNodeControlProgramPst3sCommon1_PowerStateStruct {
    TypesCubeNodeControlProgramPst3sCommon1_Pst3sPowerState power;    /**< STR Power State  */
} TypesCubeNodeControlProgramPst3sCommon1_PowerState;

/**
 * @brief BootError general structure
 */
typedef struct TypesCubeNodeControlProgramPst3sCommon1_BootErrorStruct {
    U32 errorCode;    /**< Boot Error Code  */
} TypesCubeNodeControlProgramPst3sCommon1_BootError;

/**
 * @brief StrStatus general structure
 */
typedef struct TypesCubeNodeControlProgramPst3sCommon1_StrStatusStruct {
    TypesCubeNodeControlProgramPst3sCommon1_Pst3sState state;                  /**< Service State  */
    U32 failCount;                                                             /**< Request Failure Count  */
    U32 failCountLastSuccess;                                                  /**< Request Failure Count at Last Success  */
    TypesCubeNodeControlProgramPst3sCommon1_Pst3sTcTlms lastReq;               /**< Last Request  */
    TypesCubeNodeControlProgramPst3sCommon1_Pst3sTcTlmResult lastReqResult;    /**< Last Request Result  */
} TypesCubeNodeControlProgramPst3sCommon1_StrStatus;

/**
 * @brief RawTlm general structure
 */
typedef struct TypesCubeNodeControlProgramPst3sCommon1_RawTlmStruct {
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    F32 quat1;                                                                                        /**< PST3S Quaternion 1  (valid range is between -1  and 1 ) */
    F32 quat2;                                                                                        /**< PST3S Quaternion 2  (valid range is between -1  and 1 ) */
    F32 quat3;                                                                                        /**< PST3S Quaternion 3  (valid range is between -1  and 1 ) */
    F32 quat4;                                                                                        /**< PST3S Quaternion 4  (valid range is between -1  and 1 ) */
    F32 angVelX;                                                                                      /**< PST3S Angular Valocity X  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelY;                                                                                      /**< PST3S Angular Valocity Y  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelZ;                                                                                      /**< PST3S Angular Valocity Z  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sRateQuality rateQuality;                        /**< PST3S Rate Quality  */
    U32 unixSeconds;                                                                                  /**< PST3S Unix Seconds  (measurment unit is [S]) */
    F32 unixSecondsDecimal;                                                                           /**< PST3S Unix Seconds Decimal  (measurment unit is [S]. valid range is between 0 S and 1 S) */
    S8 temperature;                                                                                   /**< PST3S Temperature  (measurment unit is [C]) */
    U8 imageExposure;                                                                                 /**< PST3S Image Exposure  */
    U8 imageThreshold;                                                                                /**< PST3S Image Threshold  */
    U8 backGroundValues;                                                                              /**< PST3S BackGround Values  */
    U8 internalProcessCode;                                                                           /**< PST3S Internal Process Code  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sSelfTestResult cmosChipIdResult;                /**< PST3S CMOS Chip ID Self-test Result  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sSelfTestResult fpgaMRamResult;                  /**< PST3S FPGA MRAM Self-test Result  */
    U8 numberOfExtractedStars;                                                                        /**< PST3S Number of Extracted Stars  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    U8 imagingGain;                                                                                   /**< PST3S Imaging Gain  */
    U8 minNavigationStars;                                                                            /**< PST3S Minimum Navigation Stars When Quaternion is Valid  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sDataValid dataValid;                            /**< PST3S Data Valid  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sExtImageState extImageState;                    /**< PST3S External Image State  */
    U8 identifiedStars;                                                                               /**< PST3S Number of Identified Stars  */
    U8 deviceNumber;                                                                                  /**< PST3S Device Number  */
    U8 softwareVersion;                                                                               /**< PST3S Software Version  */
    U8 edacErrorCount;                                                                                /**< PST3S EDAC Error Count  */
    U32 imageFrameNumber;                                                                             /**< PST3S Image Frame Number  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sDynamicModeEnum dynamicMode;                    /**< PST3S Dynamic Mode  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sSaaWorkingMode saaMode;                         /**< PST3S SAA Mode  */
    U8 saaThreshold;                                                                                  /**< PST3S SAA Threshold  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
    U8 fourStarCaptureThreshold;                                                                      /**< PST3S Four Star Capture Threshold  */
    U8 trackingThreshold;                                                                             /**< PST3S Tracking Threshold  */
    Boolean edacSwitch;                                                                               /**< PST3S EDAC Enabled/Disabled  */
} TypesCubeNodeControlProgramPst3sCommon1_RawTlm;

/**
 * @brief AttitudeTlm general structure
 */
typedef struct TypesCubeNodeControlProgramPst3sCommon1_AttitudeTlmStruct {
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    F32 quat1;                                                                                        /**< PST3S Quaternion 1  (valid range is between -1  and 1 ) */
    F32 quat2;                                                                                        /**< PST3S Quaternion 2  (valid range is between -1  and 1 ) */
    F32 quat3;                                                                                        /**< PST3S Quaternion 3  (valid range is between -1  and 1 ) */
    F32 quat4;                                                                                        /**< PST3S Quaternion 4  (valid range is between -1  and 1 ) */
    F32 angVelX;                                                                                      /**< PST3S Angular Valocity X  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelY;                                                                                      /**< PST3S Angular Valocity Y  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelZ;                                                                                      /**< PST3S Angular Valocity Z  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sRateQuality rateQuality;                        /**< PST3S Rate Quality  */
    U32 unixSeconds;                                                                                  /**< PST3S Unix Seconds  (measurment unit is [S]) */
    F32 unixSecondsDecimal;                                                                           /**< PST3S Unix Seconds Decimal  (measurment unit is [S]) */
    U8 numberOfExtractedStars;                                                                        /**< PST3S Number of Extracted Stars  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sDataValid dataValid;                            /**< PST3S Data Valid  */
    U8 identifiedStars;                                                                               /**< PST3S Number of Identified Stars  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
} TypesCubeNodeControlProgramPst3sCommon1_AttitudeTlm;

/**
 * @brief HousekeepingTlm general structure
 */
typedef struct TypesCubeNodeControlProgramPst3sCommon1_HousekeepingTlmStruct {
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    S8 temperature;                                                                                   /**< PST3S Temperature  (measurment unit is [C]) */
    U8 backGroundValues;                                                                              /**< PST3S BackGround Values  */
    U8 internalProcessCode;                                                                           /**< PST3S Internal Process Code  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sSelfTestResult cmosChipIdResult;                /**< PST3S CMOS Chip ID Self-test Result  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sSelfTestResult fpgaMRamResult;                  /**< PST3S FPGA MRAM Self-test Result  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sExtImageState extImageState;                    /**< PST3S External Image State  */
    U8 deviceNumber;                                                                                  /**< PST3S Device Number  */
    U8 softwareVerion;                                                                                /**< PST3S Software Version  */
    U8 edacErrorCount;                                                                                /**< PST3S EDAC Error Count  */
    U32 imageFrameNumber;                                                                             /**< PST3S Image Frame Number  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
} TypesCubeNodeControlProgramPst3sCommon1_HousekeepingTlm;

/**
 * @brief ConfigTlm general structure
 */
typedef struct TypesCubeNodeControlProgramPst3sCommon1_ConfigTlmStruct {
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    U8 imageExposure;                                                                                 /**< PST3S Image Exposure  */
    U8 imageThreshold;                                                                                /**< PST3S Image Threshold  */
    U8 backGroundValues;                                                                              /**< PST3S BackGround Values  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    U8 imagingGain;                                                                                   /**< PST3S Imaging Gain  */
    U8 minNavigationStars;                                                                            /**< PST3S Minimum Navigation Stars When Quaternion is Valid  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sDynamicModeEnum dynamicMode;                    /**< PST3S Dynamic Mode  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sSaaWorkingMode saaMode;                         /**< PST3S SAA Mode  */
    U8 saaThreshold;                                                                                  /**< PST3S SAA Threshold  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
    U8 fourStarCaptureThreshold;                                                                      /**< PST3S Four Star Capture Threshold  */
    U8 trackingThreshold;                                                                             /**< PST3S Tracking Threshold  */
    Boolean edacSwitch;                                                                               /**< PST3S EDAC Enabled/Disabled  */
} TypesCubeNodeControlProgramPst3sCommon1_ConfigTlm;

/**
 * @brief PST3S Power State message structure
 * @details Set the PST3S Power State
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sPowerStruct {
    U32 unixTimeSeconds;                                                                                      /**< Current Unix time s (used for second calibration)  (measurment unit is [s]) */
    U32 unixTimeNanoSeconds;                                                                                  /**< Current Unix time ns (used for second calibration)  (measurment unit is [ns]. valid range is between 0 ns and 999999999 ns) */
    TypesCubeNodeControlProgramPst3sCommon1_PowerState powerStr[TYPES_CUBE_NODE_COMMON_TYPES_1__PORT_MAX];    /**< PST3S Power State  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sPower;

/**
 * @brief Node Service Settings message structure
 * @details Set/Get the Node Service Settings
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_NodeSvcSettingsStruct {
    Boolean pst3sAutoBoot;    /**< PST3S Auto-Boot on Startup Enable/Disable  */
} TypesCubeNodeControlProgramPst3sCommon1_NodeSvcSettings;

/**
 * @brief PST3S Service Settings message structure
 * @details Set/Get the PST3S Service Settings
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sSvcSettingsStruct {
    U32 maxTcTlmErrors;                                                         /**< PST3S Maximum Number of TcTlm Errors Before Entering Error State  */
    U8 sampleFrequency;                                                         /**< PST3S Sample Frequency  (measurment unit is [Hz]. valid range is between 1 Hz and 15 Hz) */
    Boolean autoSample;                                                         /**< PST3S Auto-Sample Enable/Disable  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sApiVersion apiVersion;    /**< PST3S API Version  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sSvcSettings;

/**
 * @brief Node Service Status message structure
 * @details Node Service Status
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_NodeSvcStatusStruct {
    TypesCubeNodeControlProgramPst3sCommon1_NodeState nodeState;                                              /**< CubeNode Node Service State  */
    TypesCubeNodeControlProgramPst3sCommon1_BootError bootError[TYPES_CUBE_NODE_COMMON_TYPES_1__PORT_MAX];    /**< PST3S Boot errors  */
} TypesCubeNodeControlProgramPst3sCommon1_NodeSvcStatus;

/**
 * @brief PST3S Service Status message structure
 * @details PST3S Service Status
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sSvcStatusStruct {
    TypesCubeNodeControlProgramPst3sCommon1_StrStatus status[TYPES_CUBE_NODE_COMMON_TYPES_1__PORT_MAX];    /**< PST3S Status  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sSvcStatus;

/**
 * @brief PST3S Number of Navigation Stars message structure
 * @details Set the PST3S Number of navigation stars
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sNumberNavigationStarsStruct {
    TypesCubeNodeCommonTypes1_Ports port;    /**< Target port  */
    U8 numberStars;                          /**< PST3S Number of Navigation Stars  (valid range is between 0  and 7 ) */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sNumberNavigationStars;

/**
 * @brief PST3S Image Exposure message structure
 * @details Set the PST3S Image Exposure
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sExposureStruct {
    TypesCubeNodeCommonTypes1_Ports port;    /**< Target port  */
    U8 exposure;                             /**< PST3S Image Exposure  (measurment unit is [ms]. valid range is between 0 ms and 100 ms) */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sExposure;

/**
 * @brief PST3S Image Fixed Threshold message structure
 * @details Set the PST3S Image Fixed Threshold (Factory Only)
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sImageFixedThresholdStruct {
    TypesCubeNodeCommonTypes1_Ports port;    /**< Target port  */
    U8 threshold;                            /**< PST3S Image Fixed Threshold  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sImageFixedThreshold;

/**
 * @brief PST3S SAA Mode message structure
 * @details Set the PST3S SAA Mode
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sSaaModeStruct {
    TypesCubeNodeCommonTypes1_Ports port;                                        /**< Target port  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sSaaWorkingMode saaMode;    /**< PST3S SAA Mode  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sSaaMode;

/**
 * @brief PST3S SAA Threshold message structure
 * @details Set the PST3S SAA Threshold
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sSaaThresholdStruct {
    TypesCubeNodeCommonTypes1_Ports port;    /**< Target port  */
    U8 saaThreshold;                         /**< PST3S SAA Threshold  (valid range is between 0  and 31 ) */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sSaaThreshold;

/**
 * @brief PST3S Four Star Search Threshold message structure
 * @details Set the PST3S Four Star Search Threshold (Not Recommended)
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sFSSTStruct {
    TypesCubeNodeCommonTypes1_Ports port;    /**< Target port  */
    U8 threshold;                            /**< PST3S Four Star Search Threshold  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sFSST;

/**
 * @brief PST3S Second Calibration (Unix Time) message structure
 * @details Set the PST3S Second Calibration (Unix Time)
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sSecondCalibrationStruct {
    TypesCubeNodeCommonTypes1_Ports port;    /**< Target port  */
    U32 unixTime;                            /**< PST3S Second Calibration (Unix Time)  (measurment unit is [S]) */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sSecondCalibration;

/**
 * @brief PST3S Tracking Mode Threshold message structure
 * @details Set the PST3S Tracking Mode Threshold (Not Recommended)
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sTrackingModeThresholdStruct {
    TypesCubeNodeCommonTypes1_Ports port;    /**< Target port  */
    U8 threshold;                            /**< PST3S Tracking Mode Threshold  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sTrackingModeThreshold;

/**
 * @brief PST3S Dynamic Mode message structure
 * @details Set the PST3S Dynamic Mode
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sDynamicModeStruct {
    TypesCubeNodeCommonTypes1_Ports port;                                             /**< Target port  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sDynamicModeEnum dynamicMode;    /**< PST3S Dynamic Mode  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sDynamicMode;

/**
 * @brief PST3S Quaternion Filtering message structure
 * @details Set the PST3S Quaternion Filtering
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sQuaternionFilteringStruct {
    TypesCubeNodeCommonTypes1_Ports port;                                                        /**< Target port  */
    TypesCubeNodeControlProgramPst3sCommonTypes1_Pst3sQFilteringSetState quaternionFiltering;    /**< PST3S Quaternion Filtering  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sQuaternionFiltering;

/**
 * @brief PST3S EDAC Off message structure
 * @details Set the PST3S EDAC Off
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sEdacOffStruct {
    TypesCubeNodeCommonTypes1_Ports port;    /**< Target port  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sEdacOff;

/**
 * @brief PST3S System Reset message structure
 * @details Set the PST3S System Reset
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sSystemResetStruct {
    TypesCubeNodeCommonTypes1_Ports port;    /**< Target port  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sSystemReset;

/**
 * @brief PST3S RAW TLM Port 1 message structure
 * @details Get PST3S TLM Packet from port 1. Triggers TLM Request
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sTlm1Struct {
    TypesCubeNodeControlProgramPst3sCommon1_RawTlm tlm;    /**< PST3S raw tlm  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sTlm1;

/**
 * @brief PST3S Attitude Data Port 1 message structure
 * @details Get the Last Sampled PST3S Attitude Specific Data from port 1
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sAttitude1Struct {
    TypesCubeNodeControlProgramPst3sCommon1_AttitudeTlm tlm;    /**< PST3S attitude tlm  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sAttitude1;

/**
 * @brief PST3S Housekeeping Data Port 1 message structure
 * @details Get the Last Sampled PST3S Housekeeping related data from port 1
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sHousekeeping1Struct {
    TypesCubeNodeControlProgramPst3sCommon1_HousekeepingTlm tlm;    /**< PST3S housekeeping tlm  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sHousekeeping1;

/**
 * @brief PST3S Config Port 1 message structure
 * @details Get the Last Sampled PST3S Config related data from port 1
 */
typedef struct TCTLM_PACKED TypesCubeNodeControlProgramPst3sCommon1_Pst3sConfig1Struct {
    TypesCubeNodeControlProgramPst3sCommon1_ConfigTlm tlm;    /**< PST3S config tlm  */
} TypesCubeNodeControlProgramPst3sCommon1_Pst3sConfig1;

/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

#ifdef __cplusplus
}
#endif

#endif // TYPES_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1_H
