/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TYPES_CUBE_IR_CONTROL_PROGRAM_1__H
#define TYPES_CUBE_IR_CONTROL_PROGRAM_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>

#include "typesCommonFramework1.h"
#include "typesCommonFrameworkTypes1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TypesCubeIrControlProgram1_DetectResult
*/
typedef enum TypesCubeIrControlProgram1_DetectResultEnum {
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__DET_STARTUP = 0,      /**< Initialised */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__DET_PENDING = 1,      /**< Detection in progress */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__NO_HORIZON = 2,       /**< No horizon detected in field of view */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__TOO_FEW_EDGES = 3,    /**< Not enough edge points detected */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__BAD_FIT = 4,          /**< Failed to fit shape on horizon */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__SUCCESS = 5,          /**< Horizon detected */
} TypesCubeIrControlProgram1_DetectResult;

/**
 * @brief Enumeration for TypesCubeIrControlProgram1_CaptureResult
*/
typedef enum TypesCubeIrControlProgram1_CaptureResultEnum {
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__CAP_STARTUP = 0,    /**< Initialised */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__CAP_PENDING = 1,    /**< Capture in progress */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__CAP_SUCCESS = 2,    /**< Successful capture */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__CAP_TIMEOUT = 3,    /**< Timeout waiting for capture to complete */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__CAP_ERROR = 4,      /**< Camera driver error */
} TypesCubeIrControlProgram1_CaptureResult;

/**
 * @brief Enumeration for TypesCubeIrControlProgram1_DirSelection
*/
typedef enum TypesCubeIrControlProgram1_DirSelectionEnum {
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__DOWNLOAD = 0,    /**< Download from node */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__UPLOAD = 1,      /**< Upload to node */
} TypesCubeIrControlProgram1_DirSelection;

/**
 * @brief Enumeration for TypesCubeIrControlProgram1_DataSelection
*/
typedef enum TypesCubeIrControlProgram1_DataSelectionEnum {
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__IMAGE_CALIBRATED = 0,      /**< Calibrated image */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__IMAGE_FILTERED = 1,        /**< Filtered (smoothed) image */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__HORIZON_EDGES = 2,         /**< Horizon Edges */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__EEPROMDATA = 3,            /**< EEPROM data */
    TYPES_CUBE_IR_CONTROL_PROGRAM_1__IMAGE_ELEC_OFFSETS = 4,    /**< Raw image electrical offsets */
} TypesCubeIrControlProgram1_DataSelection;

/**
 * @brief Sensor Measurement message structure
 * @details Sensor measurement result
 */
typedef struct TCTLM_PACKED TypesCubeIrControlProgram1_MeasurementStruct {
    F64 elevation;                                              /**< Measured elevation angle  (measurment unit is [deg]. valid range is between -9000 deg and 9000 deg) */
    F64 rotation;                                               /**< Measured rotation angle  (measurment unit is [deg]. valid range is between -18000 deg and 18000 deg) */
    TypesCubeIrControlProgram1_CaptureResult captureResult;     /**< Result of image capture operation  */
    TypesCubeIrControlProgram1_DetectResult detectionResult;    /**< Result of horizon detection operation  */
} TypesCubeIrControlProgram1_Measurement;

/**
 * @brief Sensor Measurement Trigger message structure
 * @details Sensor measurement result (and initiate next measurement)
 */
typedef struct TCTLM_PACKED TypesCubeIrControlProgram1_MeasurementAndTriggerStruct {
    F64 elevation;                                              /**< Measured elevation angle  (measurment unit is [deg]. valid range is between -9000 deg and 9000 deg) */
    F64 rotation;                                               /**< Measured rotation angle  (measurment unit is [deg]. valid range is between -18000 deg and 18000 deg) */
    TypesCubeIrControlProgram1_CaptureResult captureResult;     /**< Result of image capture operation  */
    TypesCubeIrControlProgram1_DetectResult detectionResult;    /**< Result of horizon detection operation  */
} TypesCubeIrControlProgram1_MeasurementAndTrigger;

/**
 * @brief Measurement Meta-data message structure
 * @details Sensor measurement meta-data
 */
typedef struct TCTLM_PACKED TypesCubeIrControlProgram1_MeasurementMetadataStruct {
    U16 minPix;           /**< Minimum pixel value  */
    U16 maxPix;           /**< Maximum pixel value  */
    U16 avgPix;           /**< Average pixel value  */
    U16 numEdgesRaw;      /**< Number of detected edges  */
    U16 numEdgesCalib;    /**< Number of detected good edges after outlier rejection  */
    U16 numWarmPix;       /**< Number of pixels found within the circular mask that is considered as earth/sun  */
    U16 numColdPix;       /**< Number of pixels found within the circular mask that is considered as space  */
    F32 circleCenterX;    /**< Centre of fitted circle X-coordinate  (measurment unit is [pixels]. valid range is between -100000 pixels and 100000 pixels) */
    F32 circleCenterY;    /**< Centre of fitted circle Y-coordinate  (measurment unit is [pixels]. valid range is between -100000 pixels and 100000 pixels) */
    F32 circleRadius;     /**< Radius of fitted circle  (measurment unit is [pixels]. valid range is between 0 pixels and 100000 pixels) */
} TypesCubeIrControlProgram1_MeasurementMetadata;

/**
 * @brief Setup Image Transfer message structure
 * @details Setup image transfer details
 */
typedef struct TCTLM_PACKED TypesCubeIrControlProgram1_ImageTransferSetupStruct {
    TypesCubeIrControlProgram1_DataSelection dataSelect;    /**< Dsta selection  */
    TypesCubeIrControlProgram1_DirSelection direction;      /**< Download or upload image  */
} TypesCubeIrControlProgram1_ImageTransferSetup;

/**
 * @brief Health Telemetry message structure
 * @details Housekeeping telemetry and error flags
 */
typedef struct TCTLM_PACKED TypesCubeIrControlProgram1_HealthTlmStruct {
    S16 mcuTemp;            /**< MCU Temperature  (measurment unit is [°C]. valid range is between -100 °C and 200 °C) */
    U16 detectorTemp;       /**< Detector ambient temperature  (measurment unit is [dK]. valid range is between 0 dK and 5000 dK) */
    U16 mcuCurrent;         /**< MCU current  (measurment unit is [mA]. valid range is between 0 mA and 1000 mA) */
    U16 detectorCurrent;    /**< Detector current  (measurment unit is [mA]. valid range is between 0 mA and 1000 mA) */
    U16 mcuVoltage;         /**< MCU supply voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) */
    U8 watchdogCount[5];    /**< Bitmask representing virtual watchdog region warning counters.  */
} TypesCubeIrControlProgram1_HealthTlm;

/**
 * @brief Configuration message structure
 * @details Detector and sensor configuration settings
 */
typedef struct TCTLM_PACKED TypesCubeIrControlProgram1_ConfigurationStruct {
    Boolean calibrateImageFull;         /**< Set to true to perform full Vdd and temperature compensation. Otherwise only electrical offsets  */
    Boolean useCalibrationRig;          /**< Set to true to if doing calibration/verification on the rig  */
    U8 circularMaskRadius;              /**< Circular mask within which to attempt detection  */
    U16 minimumTempDiff;                /**< Minimum temperature difference in dK to be considered a horizon  */
    F32 expectedEarthRadius;            /**< The expected radius of earth at the current altitude  (valid range is between 0  and 300 ) */
    F32 allowedRadiusDeviation;         /**< The maximum allowable deviation from the expected Earth radius, used to reject invalid measurements.  (valid range is between 0  and 50 ) */
    U16 maxSpaceTemp;                   /**< Temperature used to calculate histogram scan boundaries for determining temperature thresholds  */
    U16 maxEarthTempOffset;             /**< Offset from 'maxSpaceTemp' to determine 'maxEarthTemp'  */
    U16 minSpaceTempOffset;             /**< Offset from 'maxSpaceTemp' to determine 'minSpaceTemp'  */
    U16 maxEarthTempThresholdOffset;    /**< Offset from detected average Earth temp to determine 'maxEarthTempThreshold'  */
    U8 horizonCrossOverOffset;          /**< Offset from detected Space temperature to determine 'minEarthTempThreshold'  */
    S32 gradientOutlierThreshold;       /**< Used to filter out sun pixels and lens flares  */
    U16 validBinPeak;                   /**< The threshold for a valid bin peak  */
    U16 binWidth;                       /**< Used to calculate the number of bins in the histogram  */
    U16 minimumGradient;                /**< Minimum gradient to be considered a horizon  */
    U8 minimumEdgePointsRequired;       /**< The minimum amount of edge points required to do a polynomial fitting  */
    U16 circRadiusMin;                  /**< Minimum allowable radius for fitted circle.  */
    U16 circRadiusMax;                  /**< Maximum allowable radius for fitted circle.  */
    F32 horElevBias;                    /**< A constant bias to add to the measured elevation [Radians]  */
    U16 outlierRejMaxSeg;               /**< Maximum allowable segment to delete in outlier rejection (zero to disable).  */
    U8 outlierRejTol;                   /**< Maximum allowable distance between points for outlier rejection   */
    F32 boresightX;                     /**< Lens distortion model bore-sight X coordinate  (valid range is between 0  and 80 ) */
    F32 boresightY;                     /**< Lens distortion model bore-sight Y coordinate  (valid range is between 0  and 64 ) */
    F32 focalLength;                    /**< Lens distortion model focal length  (valid range is between 0  and 100 ) */
    F32 distK1;                         /**< Lens distortion model coefficient K1  (valid range is between -300  and 300 ) */
    F32 distK2;                         /**< Lens distortion model coefficient K2  (valid range is between -300  and 300 ) */
    F32 distK3;                         /**< Lens distortion model coefficient K3  (valid range is between -300  and 300 ) */
    F32 distK4;                         /**< Lens distortion model coefficient K4  (valid range is between -300  and 300 ) */
    F32 distK5;                         /**< Lens distortion model coefficient K5  (valid range is between -300  and 300 ) */
    F32 distK6;                         /**< Lens distortion model coefficient K6  (valid range is between -300  and 300 ) */
    F32 distP1;                         /**< Lens distortion model coefficient P1  (valid range is between -300  and 300 ) */
    F32 distP2;                         /**< Lens distortion model coefficient P2  (valid range is between -300  and 300 ) */
} TypesCubeIrControlProgram1_Configuration;

/**
 * @brief DeadPixels message structure
 * @details Pixels that are dead in the camera
 */
typedef struct TCTLM_PACKED TypesCubeIrControlProgram1_DeadPixelsStruct {
    U8 deadPixelIndex;    /**< Index of dead pixel  */
    U8 pixelX;            /**< X Coordinate of dead pixel  */
    U8 pixelY;            /**< Y Coordinate of dead pixel  */
    U8 pixelMask;         /**< Mask of dead pixel  */
} TypesCubeIrControlProgram1_DeadPixels;

/**
 * @brief RequestDeadPixel message structure
 * @details Pixels that are dead in the camera
 */
typedef struct TCTLM_PACKED TypesCubeIrControlProgram1_RequestDeadPixelStruct {
    U8 deadPixelIndex;    /**< Index of dead pixel  */
} TypesCubeIrControlProgram1_RequestDeadPixel;

/**
 * @brief RequestedDeadPixel message structure
 * @details Pixels that are dead in the camera
 */
typedef struct TCTLM_PACKED TypesCubeIrControlProgram1_RequestedDeadPixelStruct {
    U8 deadPixelIndex;    /**< Index of dead pixel  */
    U8 pixelX;            /**< X Coordinate of dead pixel  */
    U8 pixelY;            /**< Y Coordinate of dead pixel  */
    U8 pixelMask;         /**< Mask of dead pixel  */
} TypesCubeIrControlProgram1_RequestedDeadPixel;

/**
 * @brief Profile Timing message structure
 * @details Measured exection time for capture and detect operations
 */
typedef struct TCTLM_PACKED TypesCubeIrControlProgram1_ProfileTimingStruct {
    U16 timeCapture;      /**< Time to complete capture  (measurment unit is [ms]. valid range is between 0 ms and 2000 ms) */
    U16 timeCalibrate;    /**< Time to calibrate image  (measurment unit is [ms]. valid range is between 0 ms and 2000 ms) */
    U16 timeDetect;       /**< Time to detect horizon  (measurment unit is [ms]. valid range is between 0 ms and 2000 ms) */
} TypesCubeIrControlProgram1_ProfileTiming;

/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

#ifdef __cplusplus
}
#endif

#endif // TYPES_CUBE_IR_CONTROL_PROGRAM_1_H
