/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TYPES_COMMON_FRAMEWORK_1__H
#define TYPES_COMMON_FRAMEWORK_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>

#include "typesCommonFrameworkTypes1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TypesCommonFramework1_ErrorLogSearch
*/
typedef enum TypesCommonFramework1_ErrorLogSearchEnum {
    TYPES_COMMON_FRAMEWORK_1__REFERENCE_HEAD = 0,    /**< ReferenceHead */
    TYPES_COMMON_FRAMEWORK_1__REFERENCE_TAIL = 1,    /**< ReferenceTail */
} TypesCommonFramework1_ErrorLogSearch;

/**
 * @brief Enumeration for TypesCommonFramework1_ActiveState
*/
typedef enum TypesCommonFramework1_ActiveStateEnum {
    TYPES_COMMON_FRAMEWORK_1__DISABLED = 0,    /**< Logging is disabled */
    TYPES_COMMON_FRAMEWORK_1__ENABLED = 1,     /**< Logging is enabled */
} TypesCommonFramework1_ActiveState;

/**
 * @brief Enumeration for TypesCommonFramework1_BufferFullAction
*/
typedef enum TypesCommonFramework1_BufferFullActionEnum {
    TYPES_COMMON_FRAMEWORK_1__IGNORE = 0,    /**< Ignore new entries when buffer is full */
    TYPES_COMMON_FRAMEWORK_1__ERASE = 1,     /**< Erase log and add new entry when buffer is full */
} TypesCommonFramework1_BufferFullAction;

/**
 * @brief Enumeration for TypesCommonFramework1_ResetVal
*/
typedef enum TypesCommonFramework1_ResetValEnum {
    TYPES_COMMON_FRAMEWORK_1__DO_NOTHING = 0,    /**< Dummy Value */
    TYPES_COMMON_FRAMEWORK_1__SOFT = 55,         /**< Performs a list of final() operations before resetting */
    TYPES_COMMON_FRAMEWORK_1__HARD = 66,         /**< Performs reset immediately */
} TypesCommonFramework1_ResetVal;

/**
 * @brief Enumeration for TypesCommonFramework1_ConfigPersistState
*/
typedef enum TypesCommonFramework1_ConfigPersistStateEnum {
    TYPES_COMMON_FRAMEWORK_1__CONFIG_PERSIST_IDLE = 0,    /**< Config Persist task is IDLE */
    TYPES_COMMON_FRAMEWORK_1__CONFIG_PERSIST_BUSY = 1,    /**< Config Persist task is BUSY */
} TypesCommonFramework1_ConfigPersistState;

/**
 * @brief Enumeration for TypesCommonFramework1_ConfigPersistResult
*/
typedef enum TypesCommonFramework1_ConfigPersistResultEnum {
    TYPES_COMMON_FRAMEWORK_1__CONFIG_PERSIST_NONE = 0,                /**< No result yet for config persist */
    TYPES_COMMON_FRAMEWORK_1__CONFIG_PERSIST_SUCCESS = 1,             /**< Config Persist SUCCESSFUL */
    TYPES_COMMON_FRAMEWORK_1__CONFIG_PERSIST_ERROR_PARAM_LOCK = 2,    /**< Config Persist failed due to a parameter mutex timeout */
    TYPES_COMMON_FRAMEWORK_1__CONFIG_PERSIST_ERROR_FLASH = 3,         /**< Config Persist failed due to faillure during flash operations */
} TypesCommonFramework1_ConfigPersistResult;

/**
 * @brief Enumeration for TypesCommonFramework1_GitBranch
*/
typedef enum TypesCommonFramework1_GitBranchEnum {
    TYPES_COMMON_FRAMEWORK_1__MASTER = 0,     /**< master branch */
    TYPES_COMMON_FRAMEWORK_1__RELEASE = 1,    /**< release branch */
    TYPES_COMMON_FRAMEWORK_1__OTHER = 2,      /**< all other informal/development branches - not expected for software bundle firmware */
} TypesCommonFramework1_GitBranch;

/**
 * @brief Enumeration for TypesCommonFramework1_BootState
*/
typedef enum TypesCommonFramework1_BootStateEnum {
    TYPES_COMMON_FRAMEWORK_1__APPLICATION_INIT = 0,       /**< Application is busy booting and initializing */
    TYPES_COMMON_FRAMEWORK_1__PORT_VALIDATION = 1,        /**< CubeComputer control-program is running and performing port validation of connected nodes. Only applicable to CubeComputer */
    TYPES_COMMON_FRAMEWORK_1__AUTO_DISCOVER = 2,          /**< CubeComputer control-program is running and performing node auto discovery of connected nodes. Only applicable to CubeComputer */
    TYPES_COMMON_FRAMEWORK_1__APPLICATION_RUNNING = 3,    /**< Application is running after successful bootloader execution and initialization */
    TYPES_COMMON_FRAMEWORK_1__ASSERT_ERROR = 4,           /**< Application has triggered an ASSERT and will immediately. This is transitory and is not expected to be read as the state. It will be reflected in the reset reason.  */
} TypesCommonFramework1_BootState;

/**
 * @brief Enumeration for TypesCommonFramework1_BootResetReason
*/
typedef enum TypesCommonFramework1_BootResetReasonEnum {
    TYPES_COMMON_FRAMEWORK_1__RESET_UNKNOWN = 0,       /**< Reset reason is unknown */
    TYPES_COMMON_FRAMEWORK_1__RESET_FIREWALL = 1,      /**< Firewall (Unused) */
    TYPES_COMMON_FRAMEWORK_1__RESET_OBL = 2,           /**< Option-byte reset. This will have a dedicated reset reason if commanded, otherwise, is signals that the bootloader reloaded option bytes automatically before exitting. */
    TYPES_COMMON_FRAMEWORK_1__RESET_EXT_PIN = 3,       /**< External Pin reset (Unused) */
    TYPES_COMMON_FRAMEWORK_1__RESET_BROWN_OUT = 4,     /**< Brown Out reset */
    TYPES_COMMON_FRAMEWORK_1__RESET_SOFT = 5,          /**< Software reset */
    TYPES_COMMON_FRAMEWORK_1__RESET_WATCHDOG = 6,      /**< WatchDog Reset */
    TYPES_COMMON_FRAMEWORK_1__RESET_LOW_POWER = 7,     /**< Low Power Reset */
    TYPES_COMMON_FRAMEWORK_1__RESET_ASSERT_ERR = 8,    /**< The running application triggered an ASSERT and reset - check error log for error code */
} TypesCommonFramework1_BootResetReason;

/**
 * @brief Identification message structure
 * @details Identification information for this node (Legacy definition - use Identification2 instead)
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_IdentificationStruct {
    TypesCommonFrameworkTypes1_NodeTypeLegacy nodeType;    /**< Node type identifier  */
    TypesCommonFrameworkTypes1_ProgramType programType;    /**< Program type identifier  */
    U8 interfaceVersion;                                   /**< Interface version  */
    U8 firmwareMajorVersion;                               /**< Firmware version (Major)  */
    U8 firmwareMinorVersion;                               /**< Firmware version (Minor)  */
    U16 runtimeSeconds;                                    /**< Seconds since processor start-up  */
    U16 runtimeMilliseconds;                               /**< Milliseconds (after the integer second) since processor start-up  */
} TypesCommonFramework1_Identification;

/**
 * @brief Identification2 message structure
 * @details Identification information for this node
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_Identification2Struct {
    TypesCommonFrameworkTypes1_NodeType nodeType;          /**< Node type identifier  */
    TypesCommonFrameworkTypes1_ProgramType programType;    /**< Program type identifier  */
    U32 serialInt;                                         /**< Integer representation of the integer portion the serial number of this module sourced from active serial  */
    U8 interfaceVersion;                                   /**< Interface version  */
    U8 firmwareMajorVersion;                               /**< Firmware version (Major)  */
    U8 firmwareMinorVersion;                               /**< Firmware version (Minor)  */
    U16 firmwarePatchVersion;                              /**< Firmware version (Patch)  */
    U8 systemMajorVersion;                                 /**< System version (Major)  */
    U8 systemMinorVersion;                                 /**< System version (Minor)  */
    U16 systemPatchVersion;                                /**< System version (Patch)  */
    U8 hardwareMinorVersion;                               /**< Hardware version (Minor)  */
    U16 runtimeSeconds;                                    /**< Seconds since processor start-up  */
    U16 runtimeMilliseconds;                               /**< Milliseconds (after the integer second) since processor start-up  */
} TypesCommonFramework1_Identification2;

/**
 * @brief Version message structure
 * @details Firmware Version
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_VersionStruct {
    U8 firmwareMajorVersion;                      /**< Firmware version (Major)  */
    U8 firmwareMinorVersion;                      /**< Firmware version (Minor)  */
    U16 firmwarePatchVersion;                     /**< Firmware version (Patch)  */
    U8 systemMajorVersion;                        /**< System version (Major)  */
    U8 systemMinorVersion;                        /**< System version (Minor)  */
    U16 systemPatchVersion;                       /**< System version (Patch)  */
    TypesCommonFramework1_GitBranch gitBranch;    /**< The git branch of the firmware build  */
    U32 gitHash;                                  /**< Git has for the firmware build  */
    U32 buildHash;                                /**< Build hash  */
    U32 buildTimeSeconds;                         /**< Timestamp of the firmware build  (measurment unit is [s]) */
    U8 hardwareMinorVersion;                      /**< Hardware version (Minor)  */
} TypesCommonFramework1_Version;

/**
 * @brief Serial Number message structure
 * @details Unique serial number of the CubeSpace Component
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_SerialNumberStruct {
    Text otpSerial[32];                                      /**< OTP ASCII string of chars denoting the serial number of this module  */
    Text cfgSerial[32];                                      /**< Config ASCII string of chars denoting the serial number of this module  */
    TypesCommonFrameworkTypes1_NodeType nodeType;            /**< Node type identifier sourced from active serial  */
    U32 serialInt;                                           /**< Integer representation of the integer portion the serial number of this module sourced from active serial  */
    TypesCommonFrameworkTypes1_SerialSource activeSerial;    /**< Which area the serial number (OTP/Config) is being used internally  */
} TypesCommonFramework1_SerialNumber;

/**
 * @brief Current Unix time message structure
 * @details Current Unix time
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_UnixTimeStruct {
    U32 unixTimeSeconds;        /**< Current Unix time s  (measurment unit is [s]) */
    U32 unixTimeNanoSeconds;    /**< Current Unix time ns  (measurment unit is [ns]. valid range is between 0 ns and 999999999 ns) */
} TypesCommonFramework1_UnixTime;

/**
 * @brief Reset message structure
 * @details Perform a soft reset
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_ResetStruct {
    TypesCommonFramework1_ResetVal resetType;    /**< The type of reset to perform  */
} TypesCommonFramework1_Reset;

/**
 * @brief Communication Status message structure
 * @details Communication Status
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_CommsStatusStruct {
    U16 uartTcCounter;               /**< UART No. of telecommands received  */
    U16 uartTlmCounter;              /**< UART No. of telemetry requests received  */
    U16 uartSoftwareProtoErrors;     /**< UART Errors reported in SW checks  */
    U16 uartHardwareFlagErrors;      /**< UART Errors reported by HW Flags  */
    U16 uart2TcCounter;              /**< UART2 No. of telecommands received  */
    U16 uart2TlmCounter;             /**< UART2 No. of telemetry requests received  */
    U16 uart2SoftwareProtoErrors;    /**< UART2 Errors reported in SW checks  */
    U16 uart2HardwareFlagErrors;     /**< UART2 Errors reported by HW Flags  */
    U16 canTcCounter;                /**< CAN No. of telecommands received  */
    U16 canTlmCounter;               /**< CAN No. of telemetry requests received  */
    U16 canSoftwareProtoErrors;      /**< CAN Errors reported in SW checks  */
    U16 canHardwareFlagErrors;       /**< CAN Errors reported by HW Flags  */
    U16 i2cTcCounter;                /**< I2C No. of telecommands received  */
    U16 i2cTlmCounter;               /**< I2C No. of telemetry requests received  */
    U16 i2cSoftwareProtoErrors;      /**< I2C Errors reported in SW checks  */
    U16 i2cHardwareFlagErrors;       /**< I2C Errors reported by HW Flags  */
} TypesCommonFramework1_CommsStatus;

/**
 * @brief Persist Config Diagnostics message structure
 * @details Diagnostics data for config persistence
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_ConfigPersistDiagnosticsStruct {
    TypesCommonFramework1_ConfigPersistState state;          /**< Config Persistence Task State  */
    TypesCommonFramework1_ConfigPersistResult lastResult;    /**< Config Persistence Last Result  */
    U32 timestamp;                                           /**< Timestamp of last result  (measurment unit is [s]) */
} TypesCommonFramework1_ConfigPersistDiagnostics;

/**
 * @brief Error Log Index message structure
 * @details Describes the index of the error log that will be read when calling GetErrorLogEntry
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_ErrorLogIndexStruct {
    TypesCommonFramework1_ErrorLogSearch errorLogIndexReference;    /**< 0 = Head, 1 = Tail  */
    U16 errorLogIndexValue;                                         /**< Error Log Index Value ~ Relative to ErrorLogIndexReference  (valid range is between 0  and 256 ) */
    U16 errorLogEntries;                                            /**< Number of Error Log Entries Present  (valid range is between 0  and 256 ) */
} TypesCommonFramework1_ErrorLogIndex;

/**
 * @brief Error Log Entry message structure
 * @details Error Log Entry
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_ErrorLogEntryStruct {
    U32 errorLogEntryTimestamp;    /**< Timestamp of this Error Log Entry  */
    U32 errorLogEntryErrorCode;    /**< ErrorCode of this Error Log Entry  */
} TypesCommonFramework1_ErrorLogEntry;

/**
 * @brief Error Log Settings message structure
 * @details Error Log Settings
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_ErrorLogSettingsStruct {
    TypesCommonFramework1_ActiveState activeState;              /**< Error Logging Enabled state  */
    TypesCommonFramework1_BufferFullAction bufferFullAction;    /**< Action to take when log is full  */
} TypesCommonFramework1_ErrorLogSettings;

/**
 * @brief Boot Status message structure
 * @details State information about the device boot process
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_BootStatusStruct {
    TypesCommonFramework1_BootState state;                /**< Boot State  */
    TypesCommonFramework1_BootResetReason resetReason;    /**< Cause of the last reset  */
    Boolean sharedParamsError;                            /**< CRC check of shared parameters from bootloader failed - app will use its own config values  */
    Boolean portValidationError;                          /**< Port validation failed. Only applicable to CubeComputer.  */
    Boolean portDiscoveryError;                           /**< Auto-Discovery failed. Only applicable to CubeComputer.  */
    Boolean otpSerialError;                               /**< OTP serial number is invalid  */
    Boolean cfgSerialError;                               /**< Config serial number is invalid  */
    Boolean serialMismatchError;                          /**< OTP/Config serial numbers do not match  */
    Boolean configInvalidError;                           /**< Set if the applications config is invalid and the default configuration is being used (if available).  */
} TypesCommonFramework1_BootStatus;

/**
 * @brief Common Error Codes message structure
 * @details Error codes common to all applications
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_CommonErrorCodesStruct {
    U32 slaveSvcCan;     /**< Tctlm comms slave service error code for CAN interface (OBC comms).  */
    U32 slaveSvcUart;    /**< Tctlm comms slave service error code for UART interface (OBC comms).  */
    U32 slaveSvcI2c;     /**< Tctlm comms slave service error code for I2C interface (OBC comms).  */
    U32 errorLogSvc;     /**< Error-log service error code.  */
} TypesCommonFramework1_CommonErrorCodes;

/**
 * @brief Telecommand Acknowledge message structure
 * @details Used with the I2C protocol to receive Telecommand Ack/Nack
 */
typedef struct TCTLM_PACKED TypesCommonFramework1_TelecommandAcknowledgeStruct {
    U8 id;                                          /**< Last TcTlm ID  */
    TypesCommonFrameworkTypes1_TcTlmError error;    /**< Last TcTlm Error  */
    U8 errorIndex;                                  /**< Buffer index of error  */
    Boolean read;                                   /**< Flag indicating if this acknowledgement has been read sinc the last TCTLM  */
} TypesCommonFramework1_TelecommandAcknowledge;

/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

#ifdef __cplusplus
}
#endif

#endif // TYPES_COMMON_FRAMEWORK_1_H
