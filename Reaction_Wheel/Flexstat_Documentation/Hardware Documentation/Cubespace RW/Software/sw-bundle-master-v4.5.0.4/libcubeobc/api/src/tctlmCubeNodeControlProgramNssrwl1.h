/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__H
#define TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>

#include "typesCubeNodeControlProgramNssrwl1.h"
#include "typesCommonFrameworkTypes1.h"
#include "typesCubeNodeCommonTypes1.h"
#include "tctlmCommonFramework1.h"
#include "tctlmCubeNodeControlProgramNssrwlCommon1.h"
#include "tctlmCubeNodeCommon1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 1, Reset
 * @details Perform a soft reset
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setReset(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_Reset *setVal);

/**
 * @brief ID 2, Current Unix time
 * @details Current Unix time
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setUnixTime(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_UnixTime *setVal);

/**
 * @brief ID 3, Error Log Index
 * @details Describes the index of the error log that will be read when calling GetErrorLogEntry
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setErrorLogIndex(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogIndex *setVal);

/**
 * @brief ID 4, Error Log Entry
 * @details Error Log Entry
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setErrorLogEntry(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogEntry *setVal);

/**
 * @brief ID 5, Error Log Clear
 * @details Clear the Error Log
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setErrorLogClear(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 6, Error Log Settings
 * @details Error Log Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setErrorLogSettings(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogSettings *setVal);

/**
 * @brief ID 7, Persist Config
 * @details Writes volatile config items to flash
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setConfigPersist(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 61, NSSRWL Software Reset
 * @details Set the NSSRWL Software Reset
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNssRwlSoftwareReset(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSoftwareReset *setVal);

/**
 * @brief ID 62, Torque
 * @details Set torque
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNssRwlTorque(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTorque *setVal);

/**
 * @brief ID 63, NSSRWL Power State
 * @details Set the NSSRWL Power State
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNssRwlPower(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NssRwlPower *setVal);

/**
 * @brief ID 64, Node Service Settings
 * @details Set/Get the Node Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNodeSvcSettings(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NodeSvcSettings *setVal);

/**
 * @brief ID 65, NSSRWL Service Settings
 * @details Set/Get the NSSRWL Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNssRwlSvcSettings(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSvcSettings *setVal);

/**
 * @brief ID 66, Wheel Reference Speed
 * @details Set momentum wheel reference speed
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNssRwlWheelSpeedRef(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeedRef *setVal);

/**
 * @brief ID 67, Motor Current
 * @details Set motor current
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNssRwlMotorCurrent(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NssRwlMotorCurrent *setVal);

/**
 * @brief ID 127, 5V Power Switch State
 * @details Enable/Disable 5V Power Switch Downstream
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setPowerSwitchState(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeCommon1_PowerSwitchState *setVal);


 /* GET function prototypes */

/**
 * @brief ID 128, Identification
 * @details Identification information for this node (Legacy definition - use Identification2 instead)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getIdentification(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_Identification *returnVal);

/**
 * @brief ID 129, Serial Number
 * @details Unique serial number of the CubeSpace Component
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getSerialNumber(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_SerialNumber *returnVal);

/**
 * @brief ID 130, Error Log Index
 * @details Describes the index of the error log that will be read when calling GetErrorLogEntry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getErrorLogIndex(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogIndex *returnVal);

/**
 * @brief ID 131, Error Log Entry
 * @details Error Log Entry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getErrorLogEntry(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogEntry *returnVal);

/**
 * @brief ID 132, Error Log Settings
 * @details Error Log Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getErrorLogSettings(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ErrorLogSettings *returnVal);

/**
 * @brief ID 133, Current Unix time
 * @details Current Unix time
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getUnixTime(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_UnixTime *returnVal);

/**
 * @brief ID 134, Persist Config Diagnostics
 * @details Diagnostics data for config persistence
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getConfigPersistDiagnostics(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_ConfigPersistDiagnostics *returnVal);

/**
 * @brief ID 135, Communication Status
 * @details Communication Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getCommsStatus(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_CommsStatus *returnVal);

/**
 * @brief ID 136, Version
 * @details Firmware Version
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getVersion(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_Version *returnVal);

/**
 * @brief ID 137, Boot Status
 * @details State information about the device boot process
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getBootStatus(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_BootStatus *returnVal);

/**
 * @brief ID 138, Telecommand Acknowledge
 * @details Used with the I2C protocol to receive Telecommand Ack/Nack
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getTelecommandAcknowledge(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_TelecommandAcknowledge *returnVal);

/**
 * @brief ID 139, Common Error Codes
 * @details Error codes common to all applications
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getCommonErrorCodes(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_CommonErrorCodes *returnVal);

/**
 * @brief ID 140, Identification2
 * @details Identification information for this node
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getIdentification2(TypeDef_TctlmEndpoint *endpoint, TypesCommonFramework1_Identification2 *returnVal);

/**
 * @brief ID 182, Wheel Speed All
 * @details Wheel speed measurement for all wheels (does not depend on port selection)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNssRwlWheelSpeedAll(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeedAll *returnVal);

/**
 * @brief ID 184, Raw NSSRWL System TLM Port 1
 * @details Get NSSRWL System TLM Packet from port 1
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNssRwlTlmSystem1(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTlmSystem1 *returnVal);

/**
 * @brief ID 186, Raw NSSRWL Extended TLM Port 1
 * @details Get NSSRWL Extended TLM Packet from port 1
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNssRwlTlmExtended1(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTlmExtended1 *returnVal);

/**
 * @brief ID 188, Raw NSSRWL Standard TLM Port 1
 * @details Get NSSRWL Standard TLM Packet from port 1
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNssRwlTlmStandard1(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NssRwlTlmStandard1 *returnVal);

/**
 * @brief ID 190, Wheel Speed Port 1
 * @details Wheel speed measurement from port 1
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNssRwlWheelSpeed1(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeed1 *returnVal);

/**
 * @brief ID 191, NSSRWL Service Settings
 * @details Set/Get the NSSRWL Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNssRwlSvcSettings(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSvcSettings *returnVal);

/**
 * @brief ID 192, Node Service Settings
 * @details Set/Get the Node Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNodeSvcSettings(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NodeSvcSettings *returnVal);

/**
 * @brief ID 193, Node Service Status
 * @details Node Service Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNodeSvcStatus(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NodeSvcStatus *returnVal);

/**
 * @brief ID 194, NSSRWL Service Status
 * @details NSSRWL Service Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNssRwlSvcStatus(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeControlProgramNssrwlCommon1_NssRwlSvcStatus *returnVal);

/**
 * @brief ID 252, CubeNode Model
 * @details CubeNode Model
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNodeModel(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeCommon1_NodeModel *returnVal);

/**
 * @brief ID 253, 5V Power Switch State
 * @details Enable/Disable 5V Power Switch Downstream
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getPowerSwitchState(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeCommon1_PowerSwitchState *returnVal);

/**
 * @brief ID 254, Health Telemetry
 * @details HealthTelemetry for CubeNode
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getHealthTlm(TypeDef_TctlmEndpoint *endpoint, TypesCubeNodeCommon1_HealthTlm *returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1_H
