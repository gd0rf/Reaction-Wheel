/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__H
#define TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>

#include "typesCommonFramework1.h"
#include "typesCommonFrameworkTypes1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TypesCubeAurigaControlProgram1_AurigaLibStateVal
*/
typedef enum TypesCubeAurigaControlProgram1_AurigaLibStateValEnum {
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__INITIALIZATION = 0,    /**< Initialization */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__STANDBY = 1,           /**< Standby Mode */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__SELFTEST = 2,          /**< Self-test Mode */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__PHOTO_MODE = 3,        /**< Photo Mode */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__TRACKING = 4,          /**< Tracking */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__ARM_MODE = 5,          /**< Angular Rate Mode */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__AAM_MODE = 6,          /**< Attitude Acquisition Mode */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__ATM_MODE = 7,          /**< Attitude Tracking Mode */
} TypesCubeAurigaControlProgram1_AurigaLibStateVal;

/**
 * @brief Enumeration for TypesCubeAurigaControlProgram1_OhStateVal
*/
typedef enum TypesCubeAurigaControlProgram1_OhStateValEnum {
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__OH_STATE_OFF = 0,             /**< Optical head switched off */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__OH_STATE_WAIT_ON = 1,         /**< Wait On */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__OH_STATE_INIT_TEMPO = 2,      /**< Init Tempo */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__OH_STATE_CHECK = 3,           /**< Check */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__OH_STATE_CONFIG = 4,          /**< Config */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__OH_STATE_STANDBY = 5,         /**< Standby */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__OH_STATE_ACQ_FF = 6,          /**< Acquire FF */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__OH_STATE_ACQ_HW = 7,          /**< Acquire HW */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__OH_STATE_FIRST_TRACK = 8,     /**< First Track */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__OH_STATE_TRACKING = 9,        /**< Tracking */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__OH_STATE_OFF_REQUEST = 16,    /**< Error State Off Request */
} TypesCubeAurigaControlProgram1_OhStateVal;

/**
 * @brief Enumeration for TypesCubeAurigaControlProgram1_TestStateVal
*/
typedef enum TypesCubeAurigaControlProgram1_TestStateValEnum {
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__IDLE = 0,    /**< Standby Mode */
    TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1__BUSY = 1,    /**< Busy Mode */
} TypesCubeAurigaControlProgram1_TestStateVal;

/**
 * @brief OH Power States message structure
 * @details Optical Head Power States
 */
typedef struct TCTLM_PACKED TypesCubeAurigaControlProgram1_OhPowerStatesStruct {
    Boolean oh1Power;    /**< First Optical Head Power State  */
    Boolean oh2Power;    /**< Second Optical Head Power State  */
} TypesCubeAurigaControlProgram1_OhPowerStates;

/**
 * @brief Configuration message structure
 * @details Detector and sensor configuration settings
 */
typedef struct TCTLM_PACKED TypesCubeAurigaControlProgram1_ConfigurationStruct {
    F64 oH1QRotRALRS1;    /**< Rotation quaternion1 from 1st optical head's alignment frame RAL to sensor frame RS  (valid range is between -1  and 1 ) */
    F64 oH1QRotRALRS2;    /**< Rotation quaternion2 from 1st optical head's alignment frame RAL to sensor frame RS  (valid range is between -1  and 1 ) */
    F64 oH1QRotRALRS3;    /**< Rotation quaternion3 from 1st optical head's alignment frame RAL to sensor frame RS  (valid range is between -1  and 1 ) */
    F64 oH1QRotRALRS4;    /**< Rotation quaternion4 from 1st optical head's alignment frame RAL to sensor frame RS  (valid range is between -1  and 1 ) */
    F64 oH2QRotRALRS1;    /**< Rotation quaternion1 from 2nd optical head's alignment frame RAL to sensor frame RS  (valid range is between -1  and 1 ) */
    F64 oH2QRotRALRS2;    /**< Rotation quaternion2 from 2nd optical head's alignment frame RAL to sensor frame RS  (valid range is between -1  and 1 ) */
    F64 oH2QRotRALRS3;    /**< Rotation quaternion3 from 2nd optical head's alignment frame RAL to sensor frame RS  (valid range is between -1  and 1 ) */
    F64 oH2QRotRALRS4;    /**< Rotation quaternion4 from 2nd optical head's alignment frame RAL to sensor frame RS  (valid range is between -1  and 1 ) */
} TypesCubeAurigaControlProgram1_Configuration;

/**
 * @brief Health Telemetry message structure
 * @details Housekeeping telemetry and error flags
 */
typedef struct TCTLM_PACKED TypesCubeAurigaControlProgram1_HealthTlmStruct {
    U16 mcuVoltage;                                              /**< MCU supply voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) */
    S16 mcuTemp;                                                 /**< MCU Temperature  (measurment unit is [°C]. valid range is between -40 °C and 120 °C) */
    F64 mcuCurrent;                                              /**< MCU current  (measurment unit is [mA]. valid range is between 0 mA and 150 mA) */
    F64 sramCurrent;                                             /**< SRAM current  (measurment unit is [mA]. valid range is between 0 mA and 100 mA) */
    F64 oh1Current;                                              /**< OH1 Current  (measurment unit is [mA]. valid range is between 0 mA and 300 mA) */
    F64 oh2Current;                                              /**< OH2 Current  (measurment unit is [mA]. valid range is between 0 mA and 300 mA) */
    F64 fpga1Current;                                            /**< FPGA1 Current  (measurment unit is [mA]. valid range is between 0 mA and 200 mA) */
    F64 fpga2Current;                                            /**< FPGA2 Current  (measurment unit is [mA]. valid range is between 0 mA and 200 mA) */
    U16 fpga1Voltage;                                            /**< FPGA1 Voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) */
    U16 fpga2Voltage;                                            /**< FPGA2 Voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) */
    U16 processIdleTiming;                                       /**< Process idle delay (idle time between consecutive processing cycles)  (measurment unit is [ms]) */
    U8 watchdogCount[5];                                         /**< Bitmask representing virtual watchdog region warning counters.  */
    U16 acqSynthFlags;                                           /**< STR Synthesis flags for analog acquisition  */
    TypesCubeAurigaControlProgram1_AurigaLibStateVal sTRMode;    /**< Star Tracker Mode  */
    S16 oH1Temp;                                                 /**< OH1 Temperature  */
    S16 oH2Temp;                                                 /**< OH2 Temperature  */
    U16 blocksValidity;                                          /**< Blocks Validity at library initialization  */
    U8 resetCnt;                                                 /**< STR hot reset counters  */
    U8 lastTCSeqNum;                                             /**< Sequence number (8 low bits) of the last STR TC processed  */
    U8 tCCnt;                                                    /**< STR TC counters  */
    U8 errorInfo;                                                /**< Number of errors since last STR cold reset and various error indicator  */
    U32 lastErrorParam;                                          /**< Last Error Parameter  */
    U8 lastErrorId;                                              /**< Last Error Identifier  */
    U8 tRKLossCnt;                                               /**< Number of loss of tracking since last STR reset  */
} TypesCubeAurigaControlProgram1_HealthTlm;

/**
 * @brief Attitude Data message structure
 * @details Estimated attitude in Quaternions
 */
typedef struct TCTLM_PACKED TypesCubeAurigaControlProgram1_AttitudeDataStruct {
    TypesCubeAurigaControlProgram1_OhStateVal oh1State;    /**< First Optical Head State  */
    U16 frameCount;                                        /**< Frame count number  */
    F64 qbar0;                                             /**< First vector component  (valid range is between -1  and 1 ) */
    F64 qbar1;                                             /**< Second vector component  (valid range is between -1  and 1 ) */
    F64 qbar2;                                             /**< Third vector component  (valid range is between -1  and 1 ) */
    F64 qbar3;                                             /**< Fourth vector component  (valid range is between -1  and 1 ) */
    Boolean dataValid;                                     /**< Data is valid  */
} TypesCubeAurigaControlProgram1_AttitudeData;

/**
 * @brief Auriga Status TM message structure
 * @details Status telemetry as defined in Auriga CP Library ICD
 */
typedef struct TCTLM_PACKED TypesCubeAurigaControlProgram1_AurigaStatusStruct {
    U16 frameCount;                                              /**< Frame count number  */
    U16 iDSATM;                                                  /**< Sub-Address Identifier  */
    U32 julianDate;                                              /**< Julian Date in sec since 00:00 Jan1 2000  */
    U16 acqSynthFlags;                                           /**< STR Synthesis flags for analog acquisition  */
    TypesCubeAurigaControlProgram1_AurigaLibStateVal sTRMode;    /**< Star Tracker Mode  */
    TypesCubeAurigaControlProgram1_OhStateVal oH1State;          /**< First Optical Head State  */
    TypesCubeAurigaControlProgram1_OhStateVal oH2State;          /**< Second Optical Head State  */
    U16 blocksValidity;                                          /**< Blocks Validity at library initialization  */
    U8 resetCnt;                                                 /**< STR hot reset counters  */
    U8 lastTCSeqNum;                                             /**< Sequence number (8 low bits) of the last STR TC processed  */
    U8 tCCnt;                                                    /**< STR TC counters  */
    U8 errorInfo;                                                /**< Number of errors since last STR cold reset and various error indicator  */
    U32 lastErrorParam;                                          /**< Last Error Parameter  */
    U8 lastErrorId;                                              /**< Last Error Identifier  */
    U8 tRKLossCnt;                                               /**< Number of loss of tracking since last STR reset  */
    U16 oH1SerialNumber;                                         /**< OH1 Serial Number in FPGA  */
    U32 oH1PartNumber;                                           /**< OH1 Part Number (FPGA Design version)  */
    U16 oH1CalibParamId;                                         /**< OH1 Calibration Parameter Id  */
    U16 oH1AcqETR;                                               /**< OH1 Temperature Acquisition Date (ETR)  */
    S16 oH1Temp;                                                 /**< OH1 Temperature  */
    U16 oH2SerialNumber;                                         /**< OH2 Serial Number in FPGA  */
    U32 oH2PartNumber;                                           /**< OH2 Part Number (FPGA Design version)  */
    U16 oH2CalibParamId;                                         /**< OH2 Calibration Parameter Id  */
    U16 oH2AcqETR;                                               /**< OH2 Temperature Acquisition Date (ETR)  */
    S16 oH2Temp;                                                 /**< OH2 Temperature  */
    S16 delay;                                                   /**< Delay (tick) associated with current ETR  */
} TypesCubeAurigaControlProgram1_AurigaStatus;

/**
 * @brief Auriga Attitude Data message structure
 * @details Attitude tracking mode telemetry as defined in Auriga CP Library ICD
 */
typedef struct TCTLM_PACKED TypesCubeAurigaControlProgram1_AurigaAttitudeDataStruct {
    U16 frameCount;                                        /**< Frame count number  */
    U16 iDSATM;                                            /**< Sub-Address Identifier  */
    U16 specTC;                                            /**< Options of Telecommand  */
    U16 syntDefATM;                                        /**< Synthesis of coherence tests results  */
    U16 syntFusion;                                        /**< Synthesis of fused quaternion status  */
    U16 syntFil;                                           /**< Synthesis of available quaternions for averaging of fused quaternion  */
    U32 dateMesFil;                                        /**< QRsFil measurement time  */
    F64 qRsFil1;                                           /**< Filtered fused attitude quaternion1 Rs/Rc  (valid range is between -1  and 1 ) */
    F64 qRsFil2;                                           /**< Filtered fused attitude quaternion2 Rs/Rc  (valid range is between -1  and 1 ) */
    F64 qRsFil3;                                           /**< Filtered fused attitude quaternion3 Rs/Rc  (valid range is between -1  and 1 ) */
    F64 qRsFil4;                                           /**< Filtered fused attitude quaternion4 Rs/Rc  (valid range is between -1  and 1 ) */
    U16 iQFilXRs;                                          /**< Quality index of the filtered attitude about XRs STR axis  */
    U16 iQFilYRs;                                          /**< Quality index of the filtered attitude about YRs STR axis  */
    U16 iQFilZRs;                                          /**< Quality index of the filtered attitude about ZRs STR axis  */
    U16 nbEtoAtt;                                          /**< Number of expected stars inside STR FOV  */
    U16 nbEtoAttOH;                                        /**< Number of expected stars per OH  */
    U16 nbEtoCoh;                                          /**< Number of used stars for fused attitude  */
    U16 nbEtoCohOH;                                        /**< Number of coherent stars per OH  */
    F32 wRsFil1;                                           /**< Filtered angular rate1 in Rs  */
    F32 wRsFil2;                                           /**< Filtered angular rate2 in Rs  */
    F32 wRsFil3;                                           /**< Filtered angular rate3 in Rs  (measurment unit is [rad/s]. valid range is between -2 rad/s and 2 rad/s) */
    U16 nLPMoyOH1;                                         /**< Mean level of stray-light for OH1  */
    U16 nLPMoyOH2;                                         /**< Mean level of stray-light for OH2  */
    U16 syntFilOH1;                                        /**< Synthesis of available quaternions for averaging of OH1 quaternion  */
    U16 syntFilOH2;                                        /**< Synthesis of available quaternions for averaging of OH2 quaternion  */
    U16 syntFDIROH1;                                       /**< Synthesis of FDIR actions for OH1  */
    U16 syntFDIROH2;                                       /**< Synthesis of FDIR actions for OH2  */
    U16 syntDesOH1;                                        /**< Synthesis of OH1 designation  */
    U16 syntDesOH2;                                        /**< Synthesis of OH2 designation  */
    TypesCubeAurigaControlProgram1_OhStateVal oH1State;    /**< First Optical Head State  */
    TypesCubeAurigaControlProgram1_OhStateVal oH2State;    /**< Second Optical Head State  */
    Boolean dataValid;                                     /**< Data is valid  */
} TypesCubeAurigaControlProgram1_AurigaAttitudeData;

/**
 * @brief Trigger Auriga OH Self Test message structure
 * @details Perform self-test on all active optical heads
 */
typedef struct TCTLM_PACKED TypesCubeAurigaControlProgram1_AurigaSelfTestStruct {
    U32 magicNumber;    /**< Must be correct to trigger self-test  */
} TypesCubeAurigaControlProgram1_AurigaSelfTest;

/**
 * @brief Trigger External SRAM Test message structure
 * @details Perform test on eternal SRAM
 */
typedef struct TCTLM_PACKED TypesCubeAurigaControlProgram1_ExtMemTestStruct {
    U32 magicNumber;    /**< Must be correct to trigger SRAM test  */
} TypesCubeAurigaControlProgram1_ExtMemTest;

/**
 * @brief Auriga OH Self Test Results message structure
 * @details Result of self-test of optical heads
 */
typedef struct TCTLM_PACKED TypesCubeAurigaControlProgram1_AurigaSelfTestResultsStruct {
    Boolean oH1AAMNbRefStarsCriteria;                         /**< AAMNbRefStarsCriteria  */
    Boolean oH1AAMQuaternionCriteria;                         /**< AAMNbRefStarsCriteria  */
    Boolean oH1AAM_ATMTransitionCriteria;                     /**< AAMNbRefStarsCriteria  */
    Boolean oH1ATMNbCoherentStarsCriteria;                    /**< AAMNbRefStarsCriteria  */
    Boolean oH1ATMQuaternionCriteria;                         /**< AAMNbRefStarsCriteria  */
    Boolean oH2AAMNbRefStarsCriteria;                         /**< AAMNbRefStarsCriteria  */
    Boolean oH2AAMQuaternionCriteria;                         /**< AAMNbRefStarsCriteria  */
    Boolean oH2AAM_ATMTransitionCriteria;                     /**< AAMNbRefStarsCriteria  */
    Boolean oH2ATMNbCoherentStarsCriteria;                    /**< AAMNbRefStarsCriteria  */
    Boolean oH2ATMQuaternionCriteria;                         /**< AAMNbRefStarsCriteria  */
    TypesCubeAurigaControlProgram1_TestStateVal testState;    /**< Self-test State  */
} TypesCubeAurigaControlProgram1_AurigaSelfTestResults;

/**
 * @brief SRAM Test Result message structure
 * @details Result of SRAM Test Result
 */
typedef struct TCTLM_PACKED TypesCubeAurigaControlProgram1_ExtMemTestResultStruct {
    Boolean testResult;                                       /**< SRAM Test Result  */
    TypesCubeAurigaControlProgram1_TestStateVal testState;    /**< SRAM Test State  */
} TypesCubeAurigaControlProgram1_ExtMemTestResult;

/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

#ifdef __cplusplus
}
#endif

#endif // TYPES_CUBE_AURIGA_CONTROL_PROGRAM_1_H
