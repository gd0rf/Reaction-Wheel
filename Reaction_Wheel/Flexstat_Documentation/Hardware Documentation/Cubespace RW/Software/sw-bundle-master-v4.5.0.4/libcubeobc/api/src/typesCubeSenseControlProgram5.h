/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__H
#define TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>

#include "typesCommonFramework1.h"
#include "typesCubeSenseCommon1.h"
#include "typesCommonFrameworkTypes1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TypesCubeSenseControlProgram5_LocSelection
*/
typedef enum TypesCubeSenseControlProgram5_LocSelectionEnum {
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__TOP = 0,    /**< Top Half of SRAM */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__BOT = 1,    /**< Bottom Half of SRAM */
} TypesCubeSenseControlProgram5_LocSelection;

/**
 * @brief Enumeration for TypesCubeSenseControlProgram5_DirSelection
*/
typedef enum TypesCubeSenseControlProgram5_DirSelectionEnum {
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__DOWNLOAD = 0,    /**< Download from node */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__UPLOAD = 1,      /**< Upload to node */
} TypesCubeSenseControlProgram5_DirSelection;

/**
 * @brief Enumeration for TypesCubeSenseControlProgram5_ImageSize
*/
typedef enum TypesCubeSenseControlProgram5_ImageSizeEnum {
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__SIZE_1024X1024 = 0,    /**< 1024 x 1024 */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__SIZE_512X512 = 1,      /**< 512 x 512 */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__SIZE_256X256 = 2,      /**< 256 x 256 */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__SIZE_128X128 = 3,      /**< 128 x 128 */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__SIZE_64X64 = 4,        /**< 64 x 64 */
} TypesCubeSenseControlProgram5_ImageSize;

/**
 * @brief Enumeration for TypesCubeSenseControlProgram5_DetectResult
*/
typedef enum TypesCubeSenseControlProgram5_DetectResultEnum {
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__DET_STARTUP = 0,      /**< Initialized */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__NO_DETECT = 1,        /**< Nothing Detected */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__DET_PENDING = 2,      /**< Pending a result */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__SUN_NOT_FOUND = 6,    /**< No Sun found */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__SUCCESS = 7,          /**< Sun detected */
} TypesCubeSenseControlProgram5_DetectResult;

/**
 * @brief Enumeration for TypesCubeSenseControlProgram5_CaptureResult
*/
typedef enum TypesCubeSenseControlProgram5_CaptureResultEnum {
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__CAP_STARTUP = 0,                /**< Initialized */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__CAP_PENDING = 1,                /**< Issued but not complete */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__CAPTURE_SUCCESS_NORMAL = 2,     /**< Successful capture */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__TIMEOUT = 3,                    /**< Response Timeout */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__SRAMERR = 4,                    /**< Overcurrent Detected */
    TYPES_CUBE_SENSE_CONTROL_PROGRAM_5__CAPTURE_SUCCESS_FLIPPED = 5,    /**< Successful capture but result flipped */
} TypesCubeSenseControlProgram5_CaptureResult;

/**
 * @brief CAM Distortion message structure
 * @details Distortion coefficients for CAM
 */
typedef struct TCTLM_PACKED TypesCubeSenseControlProgram5_CamLensDistortionStruct {
    F32 c0;    /**< Coefficient 0  (valid range is between -100  and 100 ) */
    F32 c1;    /**< Coefficient 0  (valid range is between -100  and 100 ) */
    F32 c2;    /**< Coefficient 0  (valid range is between -100  and 100 ) */
    F32 c3;    /**< Coefficient 0  (valid range is between -100  and 100 ) */
    F32 c4;    /**< Coefficient 0  (valid range is between -100  and 100 ) */
} TypesCubeSenseControlProgram5_CamLensDistortion;

/**
 * @brief Request Masking Areas message structure
 * @details 5 masked areas each specified by 4 coordinates
 */
typedef struct TCTLM_PACKED TypesCubeSenseControlProgram5_CamMasksStruct {
    U16 area1Xmin;    /**< Minimum X of Area 1  */
    U16 area1Xmax;    /**< Maximum X of Area 1  */
    U16 area1Ymin;    /**< Minimum Y of Area 1  */
    U16 area1Ymax;    /**< Maximum Y of Area 1  */
    U16 area2Xmin;    /**< Minimum X of Area 2  */
    U16 area2Xmax;    /**< Maximum X of Area 2  */
    U16 area2Ymin;    /**< Minimum Y of Area 2  */
    U16 area2Ymax;    /**< Maximum Y of Area 2  */
    U16 area3Xmin;    /**< Minimum X of Area 3  */
    U16 area3Xmax;    /**< Maximum X of Area 3  */
    U16 area3Ymin;    /**< Minimum Y of Area 3  */
    U16 area3Ymax;    /**< Maximum Y of Area 3  */
    U16 area4Xmin;    /**< Minimum X of Area 4  */
    U16 area4Xmax;    /**< Maximum X of Area 4  */
    U16 area4Ymin;    /**< Minimum Y of Area 4  */
    U16 area4Ymax;    /**< Maximum Y of Area 4  */
    U16 area5Xmin;    /**< Minimum X of Area 5  */
    U16 area5Xmax;    /**< Maximum X of Area 5  */
    U16 area5Ymin;    /**< Minimum Y of Area 5  */
    U16 area5Ymax;    /**< Maximum Y of Area 5  */
} TypesCubeSenseControlProgram5_CamMasks;

/**
 * @brief Capture Image message structure
 * @details Capture image to specified location
 */
typedef struct TCTLM_PACKED TypesCubeSenseControlProgram5_ImageCaptureStruct {
    TypesCubeSenseControlProgram5_LocSelection locSelect;    /**< Location in SRAM to save image  */
} TypesCubeSenseControlProgram5_ImageCapture;

/**
 * @brief Setup Image Transfer message structure
 * @details Setup image transfer details
 */
typedef struct TCTLM_PACKED TypesCubeSenseControlProgram5_ImageTransferSetupStruct {
    TypesCubeSenseControlProgram5_LocSelection locSelect;    /**< Location in SRAM from which to download  */
    TypesCubeSenseControlProgram5_ImageSize imageSize;       /**< Resolution selection of image to be downloaded  */
    TypesCubeSenseControlProgram5_DirSelection direction;    /**< Download or upload image  */
} TypesCubeSenseControlProgram5_ImageTransferSetup;

/**
 * @brief Sensor results message structure
 * @details Sensor results
 */
typedef struct TCTLM_PACKED TypesCubeSenseControlProgram5_SensorResultsStruct {
    F64 sensorA;                                                         /**< Alpha Angle  (measurment unit is [deg]) */
    F64 sensorB;                                                         /**< Beta Angle  (measurment unit is [deg]) */
    TypesCubeSenseControlProgram5_CaptureResult sensorCaptureResult;     /**< 0 = Start-up, 1 = Result pending, 2 = Success, 3 = Timeout, 4 = SRAMErr  */
    TypesCubeSenseControlProgram5_DetectResult sensorDetectionResult;    /**< 0 = Start-up, 1 = No Detection Performed, 2 = Detection Pending, 6 = Sun not found, 7 = Succesful Detection  */
} TypesCubeSenseControlProgram5_SensorResults;

/**
 * @brief Sensor results timestamp message structure
 * @details Timestamp of last results
 */
typedef struct TCTLM_PACKED TypesCubeSenseControlProgram5_SensorResultsTimestampStruct {
    U32 unixTimestampSeconds;        /**< Unix timestamp s  (measurment unit is [s]) */
    U32 unixTimestampNanoSeconds;    /**< Unix timestamp ns  (measurment unit is [ns]. valid range is between 0 ns and 999999999 ns) */
} TypesCubeSenseControlProgram5_SensorResultsTimestamp;

/**
 * @brief Sensor Results Trigger message structure
 * @details Sensor Results with Auto-trigger
 */
typedef struct TCTLM_PACKED TypesCubeSenseControlProgram5_SensorResultTriggerStruct {
    F64 sensorA;                                                         /**< Alpha Angle  (measurment unit is [deg]) */
    F64 sensorB;                                                         /**< Beta Angle  (measurment unit is [deg]) */
    TypesCubeSenseControlProgram5_CaptureResult sensorCaptureResult;     /**< 0 = Start-up, 1 = Result pending, 2 = Success, 3 = Timeout, 4 = SRAMErr  */
    TypesCubeSenseControlProgram5_DetectResult sensorDetectionResult;    /**< 0 = Start-up, 1 = No Detection Performed, 2 = Detection Pending, 6 = Sun not found, 7 = Succesful Detection  */
} TypesCubeSenseControlProgram5_SensorResultTrigger;

/**
 * @brief Set Camera boresight message structure
 * @details Set Camera boresight pixel location
 */
typedef struct TCTLM_PACKED TypesCubeSenseControlProgram5_CamBoresightStruct {
    F64 xpixel;    /**< 100*(X Pixel location of camera boresight)  */
    F64 ypixel;    /**< 100*(Y Pixel location of camera boresight)  */
} TypesCubeSenseControlProgram5_CamBoresight;

/**
 * @brief Set Sensor Masking Area message structure
 * @details Specify which areas of sensor to mask
 */
typedef struct TCTLM_PACKED TypesCubeSenseControlProgram5_CamMaskStruct {
    U8 areaNumber;    /**< Number indicating which of 5 (0-4) areas will be specified  */
    U16 xmin;         /**< Minimum X value of the area (X=0 is left side of image)  */
    U16 xmax;         /**< Maximum X value of the area  */
    U16 ymin;         /**< Minimum Y value of the area (Y=0 is top of image)  */
    U16 ymax;         /**< Maximum Y value of the area  */
} TypesCubeSenseControlProgram5_CamMask;

/**
 * @brief Set Cam Detection Threshold message structure
 * @details Set threshold for cam detection
 */
typedef struct TCTLM_PACKED TypesCubeSenseControlProgram5_CamThresholdStruct {
    U8 threshold;    /**< Threshold for detection  */
} TypesCubeSenseControlProgram5_CamThreshold;

/**
 * @brief Auto Cam Sensor Raw message structure
 * @details Raw pixel values for calibration perposes
 */
typedef struct TCTLM_PACKED TypesCubeSenseControlProgram5_AutoCamSensorRawStruct {
    F64 pixelX;    /**< The raw X pixel value  */
    F64 pixelY;    /**< The raw Y pixel value  */
} TypesCubeSenseControlProgram5_AutoCamSensorRaw;

/**
 * @brief Detection Area Row Select message structure
 * @details Detection Area Row Select
 */
typedef struct TCTLM_PACKED TypesCubeSenseControlProgram5_DetectionAreaRowSelectStruct {
    U8 rowSelect;    /**< Row select  */
} TypesCubeSenseControlProgram5_DetectionAreaRowSelect;

/**
 * @brief Detection Area Row message structure
 * @details Detection Area Row (25 pixels)
 */
typedef struct TCTLM_PACKED TypesCubeSenseControlProgram5_DetectionAreaRowStruct {
    U8 rowBytes[25];    /**< Row bytes  */
} TypesCubeSenseControlProgram5_DetectionAreaRow;

/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

#ifdef __cplusplus
}
#endif

#endif // TYPES_CUBE_SENSE_CONTROL_PROGRAM_5_H
