/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TYPES_CUBE_STAR_CONTROL_PROGRAM_6__H
#define TYPES_CUBE_STAR_CONTROL_PROGRAM_6__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>

#include "typesCommonFramework1.h"
#include "typesCommonFrameworkTypes1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TypesCubeStarControlProgram6_TestPatternSelection
*/
typedef enum TypesCubeStarControlProgram6_TestPatternSelectionEnum {
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__TEST_PAT_VIDEO = 0,     /**< None */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__TEST_PAT_DIAG_1 = 1,    /**< Image capture scheduled */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__TEST_PAT_DIAG_2 = 2,    /**< Image capture in progress */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__TEST_PAT_RAMP = 3,      /**< Successful capture */
} TypesCubeStarControlProgram6_TestPatternSelection;

/**
 * @brief Enumeration for TypesCubeStarControlProgram6_IntTimeMultSelection
*/
typedef enum TypesCubeStarControlProgram6_IntTimeMultSelectionEnum {
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__INT_TIME_MULT_X8 = 0,     /**< x8 */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__INT_TIME_MULT_X16 = 1,    /**< x16 */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__INT_TIME_MULT_X32 = 2,    /**< x32 */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__INT_TIME_MULT_X64 = 3,    /**< x64 */
} TypesCubeStarControlProgram6_IntTimeMultSelection;

/**
 * @brief Enumeration for TypesCubeStarControlProgram6_AnalogGainSelection
*/
typedef enum TypesCubeStarControlProgram6_AnalogGainSelectionEnum {
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ANA_GAIN_X1 = 0,       /**< x1 */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ANA_GAIN_X1__5 = 1,    /**< x1.5 */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ANA_GAIN_X2 = 2,       /**< x2 */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ANA_GAIN_X3 = 3,       /**< x3 */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ANA_GAIN_X4 = 4,       /**< x4 */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ANA_GAIN_X6 = 5,       /**< x6 */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ANA_GAIN_X8 = 6,       /**< x8(6) */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ANA_GAIN_X8__2 = 7,    /**< x8(7) */
} TypesCubeStarControlProgram6_AnalogGainSelection;

/**
 * @brief Enumeration for TypesCubeStarControlProgram6_CaptureStatus
*/
typedef enum TypesCubeStarControlProgram6_CaptureStatusEnum {
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__CAPTURE_STARTUP = 0,    /**< Initialised */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__CAPTURE_PENDING = 1,    /**< Image capture scheduled */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__CAPTURE_BUSY = 2,       /**< Image capture in progress */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__CAPTURE_DONE = 3,       /**< Successful capture */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__CAPTURE_ERROR = 4,      /**< Camera error occurred */
} TypesCubeStarControlProgram6_CaptureStatus;

/**
 * @brief Enumeration for TypesCubeStarControlProgram6_StarDetectStatus
*/
typedef enum TypesCubeStarControlProgram6_StarDetectStatusEnum {
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__DETECT_STARTUP = 0,    /**< Initialised */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__DETECT_PENDING = 1,    /**< Detection scheduled */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__DETECT_BUSY = 2,       /**< Detection in progress */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__DETECT_ABORT = 3,      /**< Detection stopped because process took too long */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__DETECT_DONE = 4,       /**< Detection completed */
} TypesCubeStarControlProgram6_StarDetectStatus;

/**
 * @brief Enumeration for TypesCubeStarControlProgram6_StarIdStatus
*/
typedef enum TypesCubeStarControlProgram6_StarIdStatusEnum {
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ID_STARTUP = 0,       /**< Initialised */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ID_PENDING = 1,       /**< Identification scheduled */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ID_BUSY = 2,          /**< Identification in progress */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ID_ABORT = 3,         /**< Identification stopped because process took too long */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ID_OUT_OF_MEM = 4,    /**< Identification stopped because there is not enough memory for match tables */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ID_TOO_FEW = 5,       /**< Identification was not attempted because there are not enough detected stars */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ID_TRACK_ERR = 6,     /**< Identification failed because previously tracked stars could not be located */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__ID_DONE = 7,          /**< Identification completed */
} TypesCubeStarControlProgram6_StarIdStatus;

/**
 * @brief Enumeration for TypesCubeStarControlProgram6_DirSelection
*/
typedef enum TypesCubeStarControlProgram6_DirSelectionEnum {
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__DOWNLOAD = 0,    /**< Download from node */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__UPLOAD = 1,      /**< Upload to node */
} TypesCubeStarControlProgram6_DirSelection;

/**
 * @brief Enumeration for TypesCubeStarControlProgram6_CompressionSelection
*/
typedef enum TypesCubeStarControlProgram6_CompressionSelectionEnum {
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__NONE = 0,    /**< Uncompressed */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__RLE = 1,     /**< Run-length encoding */
    TYPES_CUBE_STAR_CONTROL_PROGRAM_6__JPG = 2,     /**< JPG Compression */
} TypesCubeStarControlProgram6_CompressionSelection;

/**
 * @brief Lens Distortion message structure
 * @details Lens distortion parameters
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_LensDistortionStruct {
    F32 focalLength;    /**< Lens focal length  (measurment unit is [px]. valid range is between 0 px and 2000 px) */
    F32 cx;             /**< Lens principal point on X-axis  (measurment unit is [px]. valid range is between 0 px and 1280 px) */
    F32 cy;             /**< Lens principal point on Y-axis  (measurment unit is [px]. valid range is between 0 px and 1038 px) */
    F32 k1;             /**< Radial distortion coefficient K1  (valid range is between -100  and 100 ) */
    F32 k2;             /**< Radial distortion coefficient K2  (valid range is between -100  and 100 ) */
    F32 k3;             /**< Radial distortion coefficient K3  (valid range is between -100  and 100 ) */
    F32 invK1;          /**< Inverse radial distortion coefficient K1  (valid range is between -100  and 100 ) */
    F32 invK2;          /**< Inverse radial distortion coefficient K2  (valid range is between -100  and 100 ) */
    F32 invK3;          /**< Inverse radial distortion coefficient K3  (valid range is between -100  and 100 ) */
} TypesCubeStarControlProgram6_LensDistortion;

/**
 * @brief Detection Settings message structure
 * @details Star detection settings
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_DetectionSettingsStruct {
    U8 stepSize;                /**< Horizontal and vertical step when scanning for pixels above threshold  */
    U8 threshold;               /**< Minimum pixel intensity above dark value to be considered a star pixel  */
    U8 minSurroundCount;        /**< minimum number of above-threshold pixels surrounding central pix  (valid range is between 0  and 8 ) */
    U16 minStarPixels;          /**< Minimum number of pixels a star may occupy  (valid range is between 0  and 10000 ) */
    U16 maxStarPixels;          /**< Maximum number of pixels a star may occupy  (valid range is between 0  and 10000 ) */
    U16 xStart;                 /**< Region of interest start in X-axis  (valid range is between 0  and 1280 ) */
    U16 yStart;                 /**< Region of interest start in Y-axis  (valid range is between 0  and 1038 ) */
    U16 xEnd;                   /**< Region of interest end in X-axis  (valid range is between 0  and 1280 ) */
    U16 yEnd;                   /**< Region of interest end in Y-axis  (valid range is between 0  and 1038 ) */
    U16 adTolFixed;             /**< Fixed angular separation tolerance for matching star pairs  (measurment unit is [arcsec]) */
    U16 adTolR;                 /**< Additional angular separation tolerance for matching star pairs  (measurment unit is [milli-arcsec/px]) */
    U16 adTolRelaxed;           /**< Angular separation tolerance when tracking stars  (measurment unit is [arcsec]) */
    U16 maxTrackTime;           /**< Maximum time allowed when tracking stars  (measurment unit is [ms]) */
    U16 trackWindowSize;        /**< Tracking window size  (measurment unit is [px]) */
    Boolean trackUseAngRate;    /**< Use angular rate to predict tracked star positions  */
} TypesCubeStarControlProgram6_DetectionSettings;

/**
 * @brief Sensor Settings message structure
 * @details Sensor settings
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_SensorSettingsStruct {
    Boolean autoBlackLevel;                                               /**< Automatic black level adjustment (auto-clamp)  */
    Boolean rangeCompression;                                             /**< Enables range compression (in 10-bit to 8-bit conversion)  */
    TypesCubeStarControlProgram6_IntTimeMultSelection intTimeMultiply;    /**< Integration time multiplication factor  */
    TypesCubeStarControlProgram6_TestPatternSelection testPattern;        /**< Test pattern  */
    Boolean clampLockEnable;                                              /**< Clamp lock mechanism enable  */
    Boolean clampDigitalCorrect;                                          /**< Digital correction enable  */
    U8 rangeCoefficient;                                                  /**< Range compression knee-point coefficient  */
    U16 intTimeNumLines;                                                  /**< Integration time in number of lines  */
    TypesCubeStarControlProgram6_AnalogGainSelection analogGain;          /**< Analog gain  */
    U8 roiDigitalGain;                                                    /**< ROI Digital gain  */
    U8 globalDigitalGain;                                                 /**< Global Digital gain  */
    S8 autoClampAddOffset;                                                /**< Additional clamp offset with auto-clamp enabled  */
    U8 manualClampOffset;                                                 /**< Manual clamp offset with auto-clamp disabled  */
    U8 clampInitLines;                                                    /**< Number of init lines (V0) before reading matrix  (valid range is between 0  and 7 ) */
    U8 clampLockThreshold;                                                /**< Clamp lock mechanism threshold  (valid range is between 0  and 15 ) */
    U8 clampV0Gain;                                                       /**< Clamp V0 gain  (valid range is between 0  and 63 ) */
} TypesCubeStarControlProgram6_SensorSettings;

/**
 * @brief Capture and detect message structure
 * @details Capture image and perform star detection and identification
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_CaptureDetectStruct {
    Boolean forceLostInSpace;    /**< Force identification to perform lost-in-space algorithm  */
} TypesCubeStarControlProgram6_CaptureDetect;

/**
 * @brief Status message structure
 * @details Capture, star detection and identification status
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_StatusStruct {
    TypesCubeStarControlProgram6_CaptureStatus captureStatus;      /**< Status of image capture operation  */
    TypesCubeStarControlProgram6_StarDetectStatus detectStatus;    /**< Status of star detection operation  */
    TypesCubeStarControlProgram6_StarIdStatus identStatus;         /**< Status of star identification operation  */
    Boolean idle;                                                  /**< CubeStar is idle and can accept new command  */
    Boolean tracking;                                              /**< CubeStar is in tracking mode  */
    U8 numDetected;                                                /**< Number of detected stars  */
    U8 numIdentified;                                              /**< Number of identified stars  */
} TypesCubeStarControlProgram6_Status;

/**
 * @brief Matching Stars Detection Result message structure
 * @details Capture, star detection and identification status, and best three matching star pairs
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_BestStarsStruct {
    TypesCubeStarControlProgram6_CaptureStatus captureStatus;      /**< Status of image capture operation  */
    TypesCubeStarControlProgram6_StarDetectStatus detectStatus;    /**< Status of star detection operation  */
    TypesCubeStarControlProgram6_StarIdStatus identStatus;         /**< Status of star identification operation  */
    Boolean idle;                                                  /**< CubeStar is idle and can accept new command  */
    Boolean tracking;                                              /**< CubeStar is in tracking mode  */
    U8 numDetected;                                                /**< Number of detected stars  */
    U8 numIdentified;                                              /**< Number of identified stars  */
    F64 cam1x;                                                     /**< Star 1 X-component of measured body vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 cam1y;                                                     /**< Star 1 Y-component of measured body vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 cam1z;                                                     /**< Star 1 Z-component of measured body vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 ref1x;                                                     /**< Star 1 X-component of inertial reference vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 ref1y;                                                     /**< Star 1 Y-component of inertial reference vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 ref1z;                                                     /**< Star 1 Z-component of inertial reference vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 cam2x;                                                     /**< Star 2 X-component of measured body vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 cam2y;                                                     /**< Star 2 Y-component of measured body vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 cam2z;                                                     /**< Star 2 Z-component of measured body vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 ref2x;                                                     /**< Star 2 X-component of inertial reference vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 ref2y;                                                     /**< Star 2 Y-component of inertial reference vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 ref2z;                                                     /**< Star 2 Z-component of inertial reference vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 cam3x;                                                     /**< Star 3 X-component of measured body vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 cam3y;                                                     /**< Star 3 Y-component of measured body vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 cam3z;                                                     /**< Star 3 Z-component of measured body vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 ref3x;                                                     /**< Star 3 X-component of inertial reference vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 ref3y;                                                     /**< Star 3 Y-component of inertial reference vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 ref3z;                                                     /**< Star 3 Z-component of inertial reference vector  (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component) */
    F64 xRate;                                                     /**< Estimated angular rate around CubeStar X-axis  (measurment unit is [deg/s]) */
    F64 yRate;                                                     /**< Estimated angular rate around CubeStar Y-axis  (measurment unit is [deg/s]) */
    F64 zRate;                                                     /**< Estimated angular rate around CubeStar Z-axis  (measurment unit is [deg/s]) */
} TypesCubeStarControlProgram6_BestStars;

/**
 * @brief Measured Quaternion Detection Result message structure
 * @details Capture, star detection and identification status, and attitude quaternion
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_AttitudeStruct {
    TypesCubeStarControlProgram6_CaptureStatus captureStatus;      /**< Status of image capture operation  */
    TypesCubeStarControlProgram6_StarDetectStatus detectStatus;    /**< Status of star detection operation  */
    TypesCubeStarControlProgram6_StarIdStatus identStatus;         /**< Status of star identification operation  */
    Boolean idle;                                                  /**< CubeStar is idle and can accept new command  */
    Boolean tracking;                                              /**< CubeStar is in tracking mode  */
    U8 numDetected;                                                /**< Number of detected stars  */
    U8 numIdentified;                                              /**< Number of identified stars  */
    F32 q1;                                                        /**< Attitude Q1  (valid range is between -1  and 1 ) */
    F32 q2;                                                        /**< Attitude Q2  (valid range is between -1  and 1 ) */
    F32 q3;                                                        /**< Attitude Q3  (valid range is between -1  and 1 ) */
    F32 q4;                                                        /**< Attitude Q4  (valid range is between -1  and 1 ) */
    F64 xRate;                                                     /**< Estimated angular rate around CubeStar X-axis  (measurment unit is [deg/s]) */
    F64 yRate;                                                     /**< Estimated angular rate around CubeStar Y-axis  (measurment unit is [deg/s]) */
    F64 zRate;                                                     /**< Estimated angular rate around CubeStar Z-axis  (measurment unit is [deg/s]) */
} TypesCubeStarControlProgram6_Attitude;

/**
 * @brief Detected Stars message structure
 * @details List of detected stars
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_DetectedStarsStruct {
    F64 star1x;        /**< Star 1 X  */
    F64 star1y;        /**< Star 1 Y  */
    U16 star1Mvi;      /**< Star 1 Instrument magnitude  */
    S16 star1CatI;     /**< Star 1 Catalogue index  */
    F64 star2x;        /**< Star 2 X  */
    F64 star2y;        /**< Star 2 Y  */
    U16 star2Mvi;      /**< Star 2 Instrument magnitude  */
    S16 star2CatI;     /**< Star 2 Catalogue index  */
    F64 star3x;        /**< Star 3 X  */
    F64 star3y;        /**< Star 3 Y  */
    U16 star3Mvi;      /**< Star 3 Instrument magnitude  */
    S16 star3CatI;     /**< Star 3 Catalogue index  */
    F64 star4x;        /**< Star 4 X  */
    F64 star4y;        /**< Star 4 Y  */
    U16 star4Mvi;      /**< Star 4 Instrument magnitude  */
    S16 star4CatI;     /**< Star 4 Catalogue index  */
    F64 star5x;        /**< Star 5 X  */
    F64 star5y;        /**< Star 5 Y  */
    U16 star5Mvi;      /**< Star 5 Instrument magnitude  */
    S16 star5CatI;     /**< Star 5 Catalogue index  */
    F64 star6x;        /**< Star 6 X  */
    F64 star6y;        /**< Star 6 Y  */
    U16 star6Mvi;      /**< Star 6 Instrument magnitude  */
    S16 star6CatI;     /**< Star 6 Catalogue index  */
    F64 star7x;        /**< Star 7 X  */
    F64 star7y;        /**< Star 7 Y  */
    U16 star7Mvi;      /**< Star 7 Instrument magnitude  */
    S16 star7CatI;     /**< Star 7 Catalogue index  */
    F64 star8x;        /**< Star 8 X  */
    F64 star8y;        /**< Star 8 Y  */
    U16 star8Mvi;      /**< Star 8 Instrument magnitude  */
    S16 star8CatI;     /**< Star 8 Catalogue index  */
    F64 star9x;        /**< Star 9 X  */
    F64 star9y;        /**< Star 9 Y  */
    U16 star9Mvi;      /**< Star 9 Instrument magnitude  */
    S16 star9CatI;     /**< Star 9 Catalogue index  */
    F64 star10x;       /**< Star 10 X  */
    F64 star10y;       /**< Star 10 Y  */
    U16 star10Mvi;     /**< Star 10 Instrument magnitude  */
    S16 star10CatI;    /**< Star 10 Catalogue index  */
} TypesCubeStarControlProgram6_DetectedStars;

/**
 * @brief Detection Meta-data message structure
 * @details Meta-data from star detection
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_DetectionMetaDataStruct {
    U16 captureTime;         /**< Image capture duration  (measurment unit is [ms]) */
    U16 detectTime;          /**< Star detection duration  (measurment unit is [ms]) */
    U16 identTime;           /**< Star identification duration  (measurment unit is [ms]) */
    U8 darkVal;              /**< Average dark level  */
    U16 numStarsDetected;    /**< Number of detected stars  */
    U32 regionsTooSmall;     /**< Number of too small regions (noise pixels)  */
    U32 regionsTooLarge;     /**< Number of too-large regions  */
    F32 avgAdError;          /**< Average angular separation error  (measurment unit is [arcsec]) */
    F32 avgPredictError;     /**< Average pixel position error  (measurment unit is [px]) */
} TypesCubeStarControlProgram6_DetectionMetaData;

/**
 * @brief Setup Image Transfer message structure
 * @details Setup image transfer details
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_ImageTransferSetupStruct {
    TypesCubeStarControlProgram6_DirSelection direction;              /**< Transfer direction (upload or download)  */
    TypesCubeStarControlProgram6_CompressionSelection compression;    /**< Compression selection  */
    U16 windowX;                                                      /**< Left column of download window  (valid range is between 0  and 1279 ) */
    U16 windowY;                                                      /**< Top row of download window  (valid range is between 0  and 1037 ) */
    U16 windowWidth;                                                  /**< Width download window  (valid range is between 1  and 1280 ) */
    U16 windowHeight;                                                 /**< Height of download window  (valid range is between 1  and 1038 ) */
} TypesCubeStarControlProgram6_ImageTransferSetup;

/**
 * @brief Health Telemetry message structure
 * @details Housekeeping telemetry and error flags
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_HealthTlmStruct {
    S16 mcuTemp;               /**< MCU Temperature  (measurment unit is [°C]. valid range is between -100 °C and 200 °C) */
    U16 mcuCurrent;            /**< MCU current  (measurment unit is [mA]. valid range is between 0 mA and 1000 mA) */
    U16 systemCurrent;         /**< Imager, NAND, SRAM current combined  (measurment unit is [mA]. valid range is between 0 mA and 1000 mA) */
    U16 systemCurrentPk;       /**< Peak system current since last Health TLM request  (measurment unit is [mA]. valid range is between 0 mA and 1000 mA) */
    U16 mcuVoltage;            /**< MCU supply voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) */
    S16 detectorTemp;          /**< Detector PCB temperature  (measurment unit is [°C]. valid range is between -100 °C and 200 °C) */
    Boolean sensorInitOk;      /**< Sensor initialised without error  */
    Boolean sensorConfigOk;    /**< Sensor configuration set without error  */
    Boolean tempSensorOk;      /**< Temperature sensor initialised without error  */
    Boolean subsytemOn;        /**< Subsystem power switch status  */
    U32 errorCode;             /**< Error Code for the first serious fault to occur  */
    U8 watchdogCount[5];       /**< Bitmask representing virtual watchdog region warning counters.  */
} TypesCubeStarControlProgram6_HealthTlm;

/**
 * @brief Subsystem Power message structure
 * @details Switch subsystem power
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_SubsystemPowerStruct {
    Boolean subsystemPwr;    /**< Enable or disable power to subsystems  */
} TypesCubeStarControlProgram6_SubsystemPower;

/**
 * @brief Read Sensor Register message structure
 * @details Read sensor register
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_SensorRegisterReadStruct {
    U8 regAddr;    /**< Register address  */
} TypesCubeStarControlProgram6_SensorRegisterRead;

/**
 * @brief Write Sensor Register message structure
 * @details Write sensor register
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_SensorRegisterWriteStruct {
    U8 regAddr;      /**< Register address  */
    U16 regValue;    /**< Register value  */
} TypesCubeStarControlProgram6_SensorRegisterWrite;

/**
 * @brief Sensor Register Value message structure
 * @details Result of read/write sensor register
 */
typedef struct TCTLM_PACKED TypesCubeStarControlProgram6_SensorRegisterValueStruct {
    U8 regAddr;           /**< Register address  */
    U16 regValue;         /**< Register value  */
    Boolean completed;    /**< Completed  */
    Boolean error;        /**< Error while reading/writing  */
} TypesCubeStarControlProgram6_SensorRegisterValue;

/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

#ifdef __cplusplus
}
#endif

#endif // TYPES_CUBE_STAR_CONTROL_PROGRAM_6_H
